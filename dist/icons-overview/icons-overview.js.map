{"version":3,"mappings":"0LAUO,MAAMA,EAAc,MAAOC,EAAiBC,EAAkBC,IAAwB,CAC3F,KAAM,CAAE,MAAAC,CAAA,EAAU,MAAMC,EAAA,WAAO,iCAAY,4BAErCC,EAAQ,IAAIF,EAClB,OAAAE,EAAM,QAAUL,EAChBK,EAAM,SAAWJ,EACXI,EAAA,UAAY,mBAAmBH,GAAc,EAAE,GAC9CG,CACT,ECXMC,EAAmBC,GAAiBC,6BAAgCD,CAAI,UAExEE,EAAY,MAAOT,EAAiBC,IAAqB,CAC7DS,EAAO,MAAMX,EAAYC,EAASC,CAAQ,EAAG,SAAS,IAAI,CAC5D,EAEMU,EAAsB,MAAOC,EAAcZ,EAAiBC,IAAqB,CAC/E,gBAAU,UAAU,UAAUW,CAAI,EAClC,MAAAH,EAAUT,EAASC,CAAQ,CACnC,EAEMY,EAAsB,CAACN,EAAgBP,EAAiBC,IACrDO,yDACkD,IAAMG,EAAoBJ,EAAMP,EAASC,CAAQ,CAAC,KACrGa,EAAWP,CAAI,CAAC,IAAID,EAAgBC,CAAI,CAAC,YAK3CQ,EAAiB,IAEd,OAAO,wmIAAiB,EAAE,IAAKC,GAAaA,EAAS,QAAQ,mBAAoB,IAAI,CAAC,EAGzFC,EAAW,CAACC,EAAuBlB,EAAiBC,IACjDO;AAAAA,eAGM,8EAA8E;AAAA,mDAGrFU,EAAU,IAAKX,GAAmBM,EAAoBN,EAAMP,EAASC,CAAQ,CAAC,CAAC,SAKjFkB,EAAcC,GAAuB,CACzC,MAAMC,EAAOD,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EACzC,OAAKC,EACEA,EAAK,UADM,gCAEpB,EAEMC,EAAeF,GAAuB,CAC1C,MAAMnB,EAAWmB,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EAC7C,OAAKnB,EACE,OAAOA,EAAS,SAAS,EADV,GAExB,EAEMsB,EAAeH,GAAuB,CAC1C,MAAMF,EAAYH,IACZf,EAAUmB,EAAWC,CAAK,EAC1BnB,EAAWqB,EAAYF,CAAK,EAElCA,EAAM,UAAY,GAClBV,EAAOO,EAASC,EAAWlB,EAASC,CAAQ,EAAGmB,CAAK,CACtD,EAEA,SAAwBI,EAASJ,EAAoB,CACnDG,EAAYH,CAAK,CACnB","names":["createToast","message","duration","cssClasses","Toast","__vitePreload","toast","renderIconLabel","icon","html","showToast","render","copyNameToClipboard","name","renderIconContainer","renderIcon","fetchIconNames","iconPath","template","iconNames","getMessage","block","text","getDuration","renderIcons","decorate"],"sources":["../../src/components/toast/toast.template.ts","../../src/blocks/icons-overview/icons-overview.ts"],"sourcesContent":["import { html } from 'lit';\n\nexport const renderToast = (message: string, duration: number, cssClasses?: string) => {\n  return html`<toast-component\n    class=\"toast-component ${cssClasses ?? ''}\"\n    message=\"${message}\"\n    duration=\"${duration}\"\n  ></toast-component>`;\n};\n\nexport const createToast = async (message: string, duration: number, cssClasses?: string) => {\n  const { Toast } = await import('./toast.ts');\n\n  const toast = new Toast();\n  toast.message = message;\n  toast.duration = duration;\n  toast.className = `toast-component ${cssClasses ?? ''}`;\n  return toast;\n};\n","import { html, render } from 'lit';\n\nimport { renderIcon } from '../../components/icon/icon.template.ts';\nimport { createToast } from '../../components/toast/toast.template.ts';\nimport { IconName } from '../../icons.types.ts';\nimport './icons-overview.scss';\n\nconst renderIconLabel = (icon: string) => html`<span class=\"icon-label\">${icon}</span>`;\n\nconst showToast = async (message: string, duration: number) => {\n  render(await createToast(message, duration), document.body);\n};\n\nconst copyNameToClipboard = async (name: string, message: string, duration: number) => {\n  await navigator.clipboard.writeText(name);\n  await showToast(message, duration);\n};\n\nconst renderIconContainer = (icon: IconName, message: string, duration: number) => {\n  return html`\n    <button type=\"button\" class=\"icon-container\" @click=\"${() => copyNameToClipboard(icon, message, duration)}\">\n      ${renderIcon(icon)} ${renderIconLabel(icon)}\n    </button>\n  `;\n};\n\nconst fetchIconNames = (): IconName[] => {\n  const iconOverview = import.meta.glob('/public/icons/*.svg');\n  return Object.keys(iconOverview).map((iconPath) => iconPath.replace(/^.*\\/(.*?)\\.svg$/, '$1')) as IconName[];\n};\n\nconst template = (iconNames: IconName[], message: string, duration: number) => {\n  return html`\n    <p>This is a list of all icons in the project. If you click on an icon its name will be copied to the clipboard.</p>\n    <pre>\n      <code> ${'<icon-component class=\"icon-component\" name=\"my-icon-name\"></icon-component>'} </code>\n    </pre>\n    <div class=\"icons-overview__container\">\n      ${iconNames.map((icon: IconName) => renderIconContainer(icon, message, duration))}\n    </div>\n  `;\n};\n\nconst getMessage = (block: HTMLElement) => {\n  const text = block.children[0].children[0];\n  if (!text) return 'Icon name copied to clipboard!';\n  return text.innerHTML;\n};\n\nconst getDuration = (block: HTMLElement) => {\n  const duration = block.children[0].children[2];\n  if (!duration) return 2000;\n  return Number(duration.innerHTML);\n};\n\nconst renderIcons = (block: HTMLElement) => {\n  const iconNames = fetchIconNames();\n  const message = getMessage(block);\n  const duration = getDuration(block);\n\n  block.innerHTML = '';\n  render(template(iconNames, message, duration), block);\n};\n\nexport default function decorate(block: HTMLElement) {\n  renderIcons(block);\n}\n"],"file":"icons-overview/icons-overview.js"}