{"version":3,"mappings":"iZAIa,IAAAA,EAAN,cAAoBC,CAAW,CAA/B,kCAEa,2DAEC,iBAEnB,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,WAAW,IAAM,CACf,KAAK,MAAM,GACV,KAAK,QAAQ,CAClB,CAEA,OAAQ,CACN,KAAK,MAAM,UAAY,oCACvB,WAAW,IAAM,CACf,KAAK,OAAO,GACX,GAAG,CACR,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,CAC7B,CAEA,QAAS,CACP,GAAK,KAAK,QACH,OAAAC,uBAA0B,KAAK,OAAO,QAC/C,CAwCF,EAnEaF,EA6BJ,OAASG,ubA3BhBC,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,GADfL,EAEX,uBAEAI,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,GAHfL,EAIX,wBAJWA,EAANI,EAAA,CADNE,EAAc,iBAAiB,GACnBN,CAAA,ECON,MAAMO,EAAc,CAACC,EAAiBC,EAAkBC,IAAwB,CAC/E,MAAAC,EAAQ,IAAIX,EAClB,OAAAW,EAAM,QAAUH,EAChBG,EAAM,SAAWF,EACXE,EAAA,UAAY,mBAAmBD,GAAc,EAAE,GAC9CC,CACT,ECZMC,EAAmBC,GAAiBX,6BAAgCW,CAAI,UAExEC,EAAsB,CAACD,EAAgBL,EAAiBC,IACrDP,yDACkD,IAAMa,EAAoBF,EAAML,EAASC,CAAQ,CAAC,KACrGO,EAAWH,CAAI,CAAC,IAAID,EAAgBC,CAAI,CAAC,YAK3CI,EAAY,CAACT,EAAiBC,IAAqBS,EAAOX,EAAYC,EAASC,CAAQ,EAAG,SAAS,IAAI,EAEvGM,EAAsB,MAAOI,EAAcX,EAAiBC,IAAqB,CAC/E,gBAAU,UAAU,UAAUU,CAAI,EACxCF,EAAUT,EAASC,CAAQ,CAC7B,EAEMW,EAAiB,SAEd,OAAO,wmIAAiB,EAAE,IAAKC,GAAaA,EAAS,QAAQ,mBAAoB,IAAI,CAAC,EAGzFC,EAAW,CAACC,EAAuBf,EAAiBC,IACxDc,EAAU,IAAKV,GAAmBC,EAAoBD,EAAML,EAASC,CAAQ,CAAC,EAE1Ee,EAAcC,GAAuB,CACzC,MAAMC,EAAOD,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EACzC,OAAKC,EACEA,EAAK,UADM,gCAEpB,EAEMC,EAAeF,GAAuB,CAC1C,MAAMhB,EAAWgB,EAAM,SAAS,CAAC,EAAE,SAAS,CAAC,EAC7C,OAAKhB,EACE,OAAOA,EAAS,SAAS,EADV,GAExB,EAEMmB,EAAc,MAAOH,GAAuB,CAC1C,MAAAF,EAAY,MAAMH,IAClBZ,EAAUgB,EAAWC,CAAK,EAC1BhB,EAAWkB,EAAYF,CAAK,EAElCA,EAAM,UAAY,GAClBP,EAAOI,EAASC,EAAWf,EAASC,CAAQ,EAAGgB,CAAK,CACtD,EAEA,eAA8BI,EAASJ,EAAoB,CACzD,MAAMG,EAAYH,CAAK,CACzB","names":["Toast","LitElement","html","css","__decorateClass","property","customElement","createToast","message","duration","cssClasses","toast","renderIconLabel","icon","renderIconContainer","copyNameToClipboard","renderIcon","showToast","render","name","fetchIconNames","iconPath","template","iconNames","getMessage","block","text","getDuration","renderIcons","decorate"],"sources":["../../src/components/toast/toast.ts","../../src/components/toast/toast.template.ts","../../src/blocks/icons-overview/icons-overview.ts"],"sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n@customElement('toast-component')\nexport class Toast extends LitElement {\n  @property({ type: String })\n  message: string = 'Your settings have been saved successfully!';\n  @property({ type: Number })\n  duration: number = 10;\n\n  connectedCallback() {\n    super.connectedCallback();\n    setTimeout(() => {\n      this.close();\n    }, this.duration);\n  }\n\n  close() {\n    this.style.animation = 'fadeOut 0.3s ease-in-out forwards';\n    setTimeout(() => {\n      this.remove();\n    }, 305);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  render() {\n    if (!this.message) return;\n    return html`<div class=\"toast\">${this.message}</div>`;\n  }\n\n  static styles = css`\n    .toast {\n      position: fixed;\n      top: 30vh;\n      right: 50vw;\n      background-color: white;\n      transform: translateX(50%);\n      display: flex;\n      flex-direction: column;\n      align-items: flex-end;\n      justify-content: flex-end;\n      z-index: 1000;\n      padding: 8px 16px;\n      border-radius: 4px;\n      box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\n      transition: opacity 0.3s ease-in-out;\n      opacity: 0;\n      animation: fadeIn 0.3s ease-in-out forwards; /* Apply fade-in animation */\n    }\n\n    @keyframes fadeIn {\n      from {\n        opacity: 0;\n      }\n      to {\n        opacity: 1;\n      }\n    }\n\n    @keyframes fadeOut {\n      from {\n        opacity: 1;\n      }\n      to {\n        opacity: 0;\n      }\n    }\n  `;\n}\n","import { html } from 'lit';\nimport { Toast } from './toast.ts';\n\nexport const renderToast = (message: string, duration: number, cssClasses?: string) => {\n  return html`<toast-component\n    class=\"toast-component ${cssClasses ?? ''}\"\n    message=\"${message}\"\n    duration=\"${duration}\"\n  ></toast-component>`;\n};\n\nexport const createToast = (message: string, duration: number, cssClasses?: string) => {\n  const toast = new Toast();\n  toast.message = message;\n  toast.duration = duration;\n  toast.className = `toast-component ${cssClasses ?? ''}`;\n  return toast;\n};\n","import { html, render } from 'lit';\nimport { renderIcon } from '../../components/icon/icon.template.ts';\nimport { createToast } from '../../components/toast/toast.template.ts';\nimport { IconName } from '../../icons.types.ts';\n\nconst renderIconLabel = (icon: string) => html`<span class=\"icon-label\">${icon}</span>`;\n\nconst renderIconContainer = (icon: IconName, message: string, duration: number) => {\n  return html`\n    <button type=\"button\" class=\"icon-container\" @click=\"${() => copyNameToClipboard(icon, message, duration)}\">\n      ${renderIcon(icon)} ${renderIconLabel(icon)}\n    </button>\n  `;\n};\n\nconst showToast = (message: string, duration: number) => render(createToast(message, duration), document.body);\n\nconst copyNameToClipboard = async (name: string, message: string, duration: number) => {\n  await navigator.clipboard.writeText(name);\n  showToast(message, duration);\n};\n\nconst fetchIconNames = async (): Promise<IconName[]> => {\n  const iconOverview = import.meta.glob('/public/icons/*.svg');\n  return Object.keys(iconOverview).map((iconPath) => iconPath.replace(/^.*\\/(.*?)\\.svg$/, '$1')) as IconName[];\n};\n\nconst template = (iconNames: IconName[], message: string, duration: number) =>\n  iconNames.map((icon: IconName) => renderIconContainer(icon, message, duration));\n\nconst getMessage = (block: HTMLElement) => {\n  const text = block.children[0].children[0];\n  if (!text) return 'Icon name copied to clipboard!';\n  return text.innerHTML;\n};\n\nconst getDuration = (block: HTMLElement) => {\n  const duration = block.children[0].children[2];\n  if (!duration) return 2000;\n  return Number(duration.innerHTML);\n};\n\nconst renderIcons = async (block: HTMLElement) => {\n  const iconNames = await fetchIconNames();\n  const message = getMessage(block);\n  const duration = getDuration(block);\n\n  block.innerHTML = '';\n  render(template(iconNames, message, duration), block);\n};\n\nexport default async function decorate(block: HTMLElement) {\n  await renderIcons(block);\n}\n"],"file":"icons-overview/icons-overview.js"}