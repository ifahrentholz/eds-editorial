{"version":3,"file":"table.js","sources":["../../src/blocks/table/table.ts"],"sourcesContent":["import { html, render } from 'lit';\n\nconst tableTemplate = (headers: string[], data: string[][]) => {\n  return html`\n    <table>\n      <thead>\n        <tr>\n          ${headers.map((header) => html`<th>${header}</th>`)}\n        </tr>\n      </thead>\n      <tbody>\n        ${data.map(\n          (rowData) => html`\n            <tr>\n              ${rowData.map((data) => html`<td>${data}</td>`)}\n            </tr>\n          `\n        )}\n      </tbody>\n    </table>\n  `;\n};\n\nconst template = (tables: { headers: string[]; data: string[][] }[]) => {\n  return tables.map((table) => tableTemplate(table.headers, table.data));\n};\n\nexport default async function renderTables(block: HTMLElement) {\n  block.innerHTML = '';\n\n  try {\n    const req = await fetch(`${window.hlx.codeBasePath}/query-index.json`);\n    if (!req.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const response = await req.json();\n\n    const tablesData = response.data.filter((item: any) => item.path.includes('/generic'));\n\n    const tables = await Promise.all(\n      tablesData.map(async (table: any) => {\n        const tableReq = await fetch(`${window.hlx.codeBasePath}${table.path}.plain.html`);\n        if (!tableReq.ok) {\n          throw new Error(`Failed to fetch data for ${table.path}`);\n        }\n        const tableContent = await tableReq.text();\n        const parser = new DOMParser();\n        const tableDoc = parser.parseFromString(tableContent, 'text/html');\n\n        const tableRows = Array.from(tableDoc.querySelectorAll('.table div'));\n        const headers = Array.from(tableRows[0].querySelectorAll('div')).map((cell) => cell.innerText);\n\n        const data: string[][] = [];\n        for (let i = 1; i < tableRows.length; i++) {\n          const rowData = Array.from(tableRows[i].querySelectorAll('div')).map((cell) => cell.innerText);\n          console.log(tableRows[i]);\n          data.push(rowData);\n        }\n\n        return { headers, data };\n      })\n    );\n\n    block.style.removeProperty('display');\n    render(template(tables), block);\n  } catch (error) {\n    console.error('Error rendering tables:', error);\n  }\n}\n"],"names":["tableTemplate","headers","data","html","header","rowData","template","tables","table","renderTables","block","req","tablesData","item","tableReq","tableContent","tableDoc","tableRows","cell","i","render","error"],"mappings":"iEAEA,MAAMA,EAAgB,CAACC,EAAmBC,IACjCC,sBAIGF,EAAQ,IAAKG,GAAWD,QAAWC,CAAM,OAAO,CAAC,uBAInDF,EAAK,IACJG,GAAYF,QAEPE,EAAQ,IAAKH,GAASC,QAAWD,CAAI,OAAO,CAAC,OAGpD,CAAA,mBAMHI,EAAYC,GACTA,EAAO,IAAKC,GAAUR,EAAcQ,EAAM,QAASA,EAAM,IAAI,CAAC,EAGvE,eAA8BC,EAAaC,EAAoB,CAC7DA,EAAM,UAAY,GAEd,GAAA,CACF,MAAMC,EAAM,MAAM,MAAM,GAAG,OAAO,IAAI,YAAY,mBAAmB,EACjE,GAAA,CAACA,EAAI,GACD,MAAA,IAAI,MAAM,sBAAsB,EAIlC,MAAAC,GAFW,MAAMD,EAAI,QAEC,KAAK,OAAQE,GAAcA,EAAK,KAAK,SAAS,UAAU,CAAC,EAE/EN,EAAS,MAAM,QAAQ,IAC3BK,EAAW,IAAI,MAAOJ,GAAe,CAC7B,MAAAM,EAAW,MAAM,MAAM,GAAG,OAAO,IAAI,YAAY,GAAGN,EAAM,IAAI,aAAa,EAC7E,GAAA,CAACM,EAAS,GACZ,MAAM,IAAI,MAAM,4BAA4BN,EAAM,IAAI,EAAE,EAEpD,MAAAO,EAAe,MAAMD,EAAS,OAE9BE,EADS,IAAI,YACK,gBAAgBD,EAAc,WAAW,EAE3DE,EAAY,MAAM,KAAKD,EAAS,iBAAiB,YAAY,CAAC,EAC9Df,EAAU,MAAM,KAAKgB,EAAU,CAAC,EAAE,iBAAiB,KAAK,CAAC,EAAE,IAAKC,GAASA,EAAK,SAAS,EAEvFhB,EAAmB,CAAA,EACzB,QAASiB,EAAI,EAAGA,EAAIF,EAAU,OAAQE,IAAK,CACzC,MAAMd,EAAU,MAAM,KAAKY,EAAUE,CAAC,EAAE,iBAAiB,KAAK,CAAC,EAAE,IAAKD,GAASA,EAAK,SAAS,EACrF,QAAA,IAAID,EAAUE,CAAC,CAAC,EACxBjB,EAAK,KAAKG,CAAO,CACnB,CAEO,MAAA,CAAE,QAAAJ,EAAS,KAAAC,EAAK,CACxB,CAAA,EAGGQ,EAAA,MAAM,eAAe,SAAS,EAC7BU,EAAAd,EAASC,CAAM,EAAGG,CAAK,QACvBW,EAAO,CACN,QAAA,MAAM,0BAA2BA,CAAK,CAChD,CACF"}