{"version":3,"mappings":"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","names":["toClassName","name","BlockService","block","config","row","cols","col","value","as","a","imgs","img","ps","p","main","shortBlockName","blockWrapper","section","href","resolve","reject","link","sections","i","status","blockName","mod","__vitePreload","error","blocks","toCamelCase","g","SectionService","blockService","container","sectionMeta","meta","key","style","wrappers","defaultContent","e","wrapper","item","parentElement","addClasses","element","classes","c","getMetadata","doc","attr","m","LCP_BLOCKS","MainService","sectionService","body","scriptEl","lcpBlocks","lcpCandidate","hash","sidebarContainer","children","template","theme","blockMap","blockModule","preloadLcpImageCandidate","linkTag"],"sources":["../../src/utils/toClassName.ts","../../src/services/block.service.ts","../../src/utils/toCamelCase.ts","../../src/services/section.service.ts","../../src/utils/addClasses.ts","../../src/utils/getMetadata.ts","../../src/services/main.service.ts","../../src/main.ts"],"sourcesContent":["export function toClassName(name: string) {\n  return typeof name === 'string'\n    ? name\n        .toLowerCase()\n        .replace(/[^0-9a-z]/gi, '-')\n        .replace(/-+/g, '-')\n        .replace(/^-|-$/g, '')\n    : '';\n}\n","import { toClassName } from '../utils/toClassName';\n\nexport class BlockService {\n  //TODO: Provider for fetch data\n  /**\n   * Extracts the config from a block.\n   * @param {Element} block The block element\n   * @returns {object} The block config\n   */\n  readBlockConfig(block: Element): Record<string, any> {\n    const config: Record<any, any> = {};\n    block.querySelectorAll(':scope > div').forEach((row) => {\n      if (row.children) {\n        const cols = [...row.children];\n        if (cols[1]) {\n          const col = cols[1];\n          const name = toClassName(cols[0].textContent ?? '');\n          let value: any = '';\n          if (col.querySelector('a')) {\n            const as = [...col.querySelectorAll('a')];\n            if (as.length === 1) {\n              value = as[0].href;\n            } else {\n              value = as.map((a) => a.href);\n            }\n          } else if (col.querySelector('img')) {\n            const imgs = [...col.querySelectorAll('img')];\n            if (imgs.length === 1) {\n              value = imgs[0].src;\n            } else {\n              value = imgs.map((img) => img.src);\n            }\n          } else if (col.querySelector('p')) {\n            const ps = [...col.querySelectorAll('p')];\n            if (ps.length === 1) {\n              value = ps[0].textContent;\n            } else {\n              value = ps.map((p) => p.textContent);\n            }\n          } else value = row.children[1].textContent;\n          config[name] = value;\n        }\n      }\n    });\n    return config;\n  }\n\n  /**\n   * Decorates all blocks in a container element.\n   * @param {Element} main The container element\n   */\n  decorateBlocks(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach(this.decorateBlock);\n  }\n\n  /**\n   * Decorates a block.\n   * @param {Element} block The block element\n   */\n  private decorateBlock(block: HTMLElement) {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  }\n\n  async loadCSS(href) {\n    return new Promise((resolve, reject) => {\n      if (!document.querySelector(`head > link[href=\"${href}\"]`)) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = href;\n        link.onload = resolve;\n        link.onerror = reject;\n        document.head.append(link);\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  updateSectionsStatus(main) {\n    const sections = [...main.querySelectorAll(':scope .section')];\n    for (let i = 0; i < sections.length; i += 1) {\n      const section = sections[i];\n      const status = section.dataset.sectionStatus;\n      if (status !== 'loaded') {\n        const loadingBlock = section.querySelector(\n          '.block[data-block-status=\"initialized\"], .block[data-block-status=\"loading\"]'\n        );\n        if (loadingBlock) {\n          section.dataset.sectionStatus = 'loading';\n          break;\n        } else {\n          section.dataset.sectionStatus = 'loaded';\n          section.style.display = null;\n        }\n      }\n    }\n  }\n\n  async loadBlock(block) {\n    const status = block.dataset.blockStatus;\n    if (status !== 'loading' && status !== 'loaded') {\n      block.dataset.blockStatus = 'loading';\n      const { blockName } = block.dataset;\n      try {\n        //const cssLoaded = this.loadCSS(`${window.hlx.codeBasePath}/dist/${blockName}/${blockName}.css`);\n        const decorationComplete = new Promise((resolve) => {\n          (async () => {\n            try {\n              const mod = await import(`${window.hlx.codeBasePath}/dist/${blockName}/${blockName}.js`);\n              if (mod.default) {\n                await mod.default(block);\n              }\n            } catch (error) {\n              // eslint-disable-next-line no-console\n              console.log(`failed to load module for ${blockName}`, error);\n            }\n            resolve(true);\n          })();\n        });\n        //await Promise.all([cssLoaded, decorationComplete]);\n        await decorationComplete;\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(`failed to load block ${blockName}`, error);\n      }\n      block.dataset.blockStatus = 'loaded';\n    }\n    return block;\n  }\n\n  async loadBlocks(main) {\n    this.updateSectionsStatus(main);\n    const blocks = [...main.querySelectorAll('div.block')];\n    for (let i = 0; i < blocks.length; i += 1) {\n      // eslint-disable-next-line no-await-in-loop\n      await this.loadBlock(blocks[i]);\n      this.updateSectionsStatus(main);\n    }\n  }\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Sanitizes a string for use as a js property name.\n * @param {string} name The unsanitized string\n * @returns {string} The camelCased name\n */\nexport function toCamelCase(name: string) {\n  return toClassName(name).replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n","import { toCamelCase } from '../utils/toCamelCase';\nimport { toClassName } from '../utils/toClassName';\nimport { BlockService } from './block.service';\n\nexport class SectionService {\n  constructor(private blockService: BlockService) {}\n\n  init(container: HTMLElement) {\n    this.transformSection(container);\n  }\n\n  /**\n   * Decorates all sections in a container element.\n   * @param {Element} main The container element\n   */\n  private transformSection(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>(':scope > div').forEach((section) => {\n      this.adjustMarkup(section);\n      this.processSectionMetaData(section);\n    });\n  }\n\n  private processSectionMetaData(section: HTMLElement) {\n    // Process section metadata\n    const sectionMeta = section.querySelector('div.section-metadata');\n    if (sectionMeta) {\n      const meta = this.blockService.readBlockConfig(sectionMeta);\n      Object.keys(meta).forEach((key) => {\n        if (key === 'style') {\n          const styles = meta.style\n            .split(',')\n            .filter((style: string) => style)\n            .map((style: string) => toClassName(style.trim()));\n          styles.forEach((style: string) => section.classList.add(style));\n        } else {\n          section.dataset[toCamelCase(key)] = meta[key];\n        }\n      });\n      if (sectionMeta.parentElement) sectionMeta.parentElement.remove();\n    }\n  }\n\n  private adjustMarkup(section: HTMLDivElement) {\n    const wrappers: HTMLDivElement[] = [];\n    let defaultContent = false;\n    [...section.children].forEach((e) => {\n      if (e.tagName === 'DIV' || !defaultContent) {\n        const wrapper = document.createElement('div');\n        wrappers.push(wrapper);\n        defaultContent = e.tagName !== 'DIV';\n\n        if (defaultContent) {\n          wrapper.classList.add('default-content-wrapper');\n        }\n      }\n      wrappers[wrappers.length - 1].append(e);\n    });\n    wrappers.forEach((wrapper) => section.append(wrapper));\n    this.decorateImages();\n    section.classList.add('section');\n    section.dataset.sectionStatus = 'initialized';\n    section.style.display = 'none';\n  }\n\n  decorateImages() {\n    const picture = document.querySelectorAll('.default-content-wrapper picture');\n    picture.forEach((item) => {\n      const parentElement = item.parentElement;\n      if (parentElement) {\n        parentElement.classList.add('image', 'main');\n      }\n    });\n  }\n}\n","import { toClassName } from './toClassName';\n\nexport const addClasses = (element: HTMLElement, classes: string) => {\n  classes.split(',').forEach((c) => {\n    element.classList.add(toClassName(c.trim()));\n  });\n};\n","export function getMetadata(name: string, doc = document) {\n  const attr = name && name.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${name}\"]`)] as HTMLMetaElement[]) || [];\n  const meta = metaTags\n    .map((m) => {\n      return m.content;\n    })\n    .join(', ');\n  return meta.length ? meta : '';\n}\n","import { addClasses } from '../utils/addClasses';\nimport { getMetadata } from '../utils/getMetadata';\nimport { BlockService } from './block.service';\nimport { SectionService } from './section.service';\n\ntype BlockMapping = {\n  name: string;\n  element: HTMLDivElement;\n};\n\nconst LCP_BLOCKS: string[] = [];\n\nexport class MainService {\n  constructor(\n    private sectionService: SectionService,\n    private blockService: BlockService\n  ) {}\n\n  init = async () => {\n    this.setup();\n    await this.loadEager();\n    // await this.loadLazy();\n  };\n\n  /**\n   * Setup block utils.\n   */\n  private setup() {\n    window.hlx = window.hlx || {};\n    window.hlx.RUM_MASK_URL = 'full';\n    window.hlx.codeBasePath = '';\n    window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n    const scriptEl = document.querySelector('script[src$=\"/scripts/scripts.js\"]') as HTMLScriptElement;\n    if (scriptEl) {\n      try {\n        [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split('/scripts/scripts.js');\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    }\n  }\n\n  async waitForLCP(lcpBlocks) {\n    const block = document.querySelector('.block') as HTMLDivElement | null;\n    const hasLCPBlock = block && lcpBlocks.includes(block.dataset.blockName);\n    if (hasLCPBlock) await this.blockService.loadBlock(block);\n\n    document.body.style.removeProperty('display');\n    const lcpCandidate = document.querySelector('main img') as HTMLImageElement | null;\n    console.log('lcpCandidate', lcpCandidate);\n\n    await new Promise((resolve) => {\n      if (lcpCandidate && !lcpCandidate.complete) {\n        lcpCandidate.setAttribute('loading', 'eager');\n        lcpCandidate.setAttribute('fetchpriority', 'high');\n        lcpCandidate.addEventListener('load', resolve);\n        lcpCandidate.addEventListener('error', resolve);\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private loadEager = async () => {\n    // TODO: how to support different languages here\n    document.documentElement.lang = 'en';\n    this.decorateTemplateAndTheme();\n    if (document) {\n      const body = document.querySelector('body');\n      if (body) {\n        body.style.display = 'none';\n      }\n    }\n    const main = document.querySelector('main');\n    if (main) {\n      main.setAttribute('id', 'main');\n      this.addSidebarContainer(main);\n      this.sectionService.init(main);\n      this.addInnerContainer(main); // TODO refactor initializing\n      this.blockService.decorateBlocks(main);\n      await this.loadBlocks();\n      // TODO: Performace adjustment\n      setTimeout(() => {\n        document.body.removeAttribute('style');\n      }, 200);\n\n      await this.waitForLCP(LCP_BLOCKS);\n    }\n  };\n\n  async loadLazy() {\n    const main = document.querySelector('main');\n    await this.blockService.loadBlocks(main); // load js and css for all the blocks in the main\n\n    const { hash } = window.location;\n    const element = hash ? document.getElementById(hash.substring(1)) : false;\n    if (hash && element) element.scrollIntoView();\n\n    // loadHeader(doc.querySelector('header'));\n    // loadFooter(doc.querySelector('footer'));\n\n    //loadCSS(`${window.hlx.codeBasePath}/styles/lazy-styles.css`);\n    // loadFonts();\n\n    // sampleRUM('lazy');\n    // sampleRUM.observe(main.querySelectorAll('div[data-block-name]'));\n    // sampleRUM.observe(main.querySelectorAll('picture > img'));\n  }\n\n  private addSidebarContainer(main: HTMLElement) {\n    const sidebarContainer = document.createElement('sidebar-component');\n    sidebarContainer.setAttribute('id', 'sidebar');\n    window.innerWidth <= 1280\n      ? sidebarContainer.classList.add('inactive')\n      : sidebarContainer.classList.remove('inactive');\n    main.after(sidebarContainer);\n  }\n\n  private addInnerContainer(main: HTMLElement) {\n    const children = main.innerHTML;\n    main.innerHTML = `<div class=\"inner\"><header-component id=\"header\"></header-component>${children}</div>`;\n  }\n\n  // private loadLazy = async () => {};\n\n  private decorateTemplateAndTheme() {\n    const template = getMetadata('template');\n    if (template) addClasses(document.body, template);\n    const theme = getMetadata('theme');\n    if (theme) addClasses(document.body, theme);\n  }\n\n  private loadBlocks = async () => {\n    const sections = document.querySelectorAll<HTMLElement>('.section');\n\n    sections.forEach(async (section) => {\n      const blocks: BlockMapping[] = this.collectBlocks(section);\n      if (!blocks.length) {\n        this.showSection(section);\n        return;\n      }\n\n      await this.loadBlockModules(blocks);\n      this.showSection(section);\n    });\n  };\n\n  private collectBlocks(section: HTMLElement): BlockMapping[] {\n    const blockMap: BlockMapping[] = [];\n    const blocksElements = section.querySelectorAll<HTMLDivElement>('[data-block-name]');\n\n    blocksElements.forEach((block: HTMLDivElement) => {\n      block.style.display = 'none';\n      blockMap.push({\n        name: block.dataset['blockName'] as string,\n        element: block,\n      });\n    });\n\n    return blockMap;\n  }\n\n  private async loadBlockModules(blocks: BlockMapping[]) {\n    for (const block of blocks) {\n      const blockModule = await import(`${window.hlx.codeBasePath}/dist/${block.name}/${block.name}.js`);\n\n      if (blockModule.default) {\n        await blockModule.default(block.element);\n      }\n    }\n  }\n\n  private showSection(section: HTMLElement) {\n    section.style.removeProperty('display');\n  }\n}\n","// const LCP_BLOCKS: string[] = []; // add your LCP blocks to the list\n\nimport './components/sidebar/sidebar.ts';\nimport './components/header.ts';\nimport { BlockService } from './services/block.service.ts';\nimport { SectionService } from './services/section.service.ts';\nimport { MainService } from './services/main.service.ts';\n\n(async function () {\n  preloadLcpImageCandidate();\n  const blockService = new BlockService();\n  const sectionService = new SectionService(blockService);\n  const main = new MainService(sectionService, blockService);\n  await main.init();\n})();\n\nfunction preloadLcpImageCandidate() {\n  const lcpCandidate = document.querySelector('main img') as HTMLImageElement | null;\n  const linkTag = document.createElement('link');\n  linkTag.rel = 'preload';\n  linkTag.as = 'image';\n  linkTag.href = lcpCandidate?.src || '';\n  // linkTag.type = getLinkTypeFromImageExt(lcpCandidate?.src);\n  document.head.appendChild(linkTag);\n\n  // <link rel=\"preload\" fetchpriority=\"high\" as=\"image\" href=\"/path/to/hero-image.webp\" type=\"image/webp\">\n}\n\n// function getLinkTypeFromImageExt(src: string | undefined) {\n//   if (src) {\n//     const ext = src.split('.').pop();\n//     if (ext === 'webp') {\n//       return 'image/webp';\n//     }\n//     if (ext === 'jpg' || ext === 'jpeg') {\n//       return 'image/jpeg';\n//     }\n//     if (ext === 'png') {\n//       return 'image/png';\n//     }\n//   }\n//   return '';\n// }\n\ndeclare global {\n  interface Window {\n    hlx: {\n      RUM_MASK_URL: string;\n      codeBasePath: string;\n      lighthouse: boolean;\n    };\n  }\n}\n"],"file":"main/main.js"}