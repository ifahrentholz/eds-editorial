{"version":3,"mappings":"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","names":["toClassName","name","addClasses","element","classes","cssClass","getMetadata","value","doc","attr","meta","metaElement","decorateTemplateAndTheme","template","theme","decorateButtons","a","up","twoup","undefinedOnEmpty","setDocLanguage","lang","collectBlocks","section","blockMap","block","getUrlForEndpoint","endpoint","baseUrl","loadBlockModules","status","href","blockModule","error","DebuggerService","loadCSS","resolve","reject","link","loadBlockStyles","config","showSection","waitForLCP","firstSection","lcpBlocks","blockPromises","lcpCandidate","isSidekickLibraryActive","main","getLocation","loadFonts","fontsCssPath","sampleRUM","checkpoint","data","defer","fnname","args","dfnname","fn","chkpnt","weight","id","_","i","random","isSelected","firstReadTime","urlSanitizers","knownProperties","sendPing","pdata","body","url","script","setupHlxObj","mainScriptPath","scriptEl","initSampleRUM","event","loadBlock","sectionsBlocks","loadBlocks","SectionsPromises","decorateImages","item","parentElement","adjustMarkup","wrappers","defaultContent","e","wrapper","toCamelCase","g","readBlockConfig","row","cols","col","as","imgs","img","ps","p","processSectionMetaData","sectionMeta","key","style","transformSection","decorateBlocks","shortBlockName","blockWrapper","HLX","cb","beforeLoadEagerTask","loadEagerTask","beforeLoadLazyTask","loadLazyTask","lazyStylesScssPath","sidekickLibraryStylesScssPath","fontsScssPath","lazyStylesCssPath","sidekickLibraryStylesCssPath","hash","beforeLoadDelayedTask","loadDelayedTask","initializedTask","HLX$1","READY_STATES","init","initHLXApp","readyState"],"sources":["../../src/utils/toClassName.ts","../../src/utils/addClasses.ts","../../src/utils/getMetadata.ts","../../src/app/tasks/decorateTemplateAndTheme.ts","../../src/app/tasks/decorateButtons.ts","../../src/utils/undefinedOnEmpty.ts","../../src/app/tasks/setDocLanguage.ts","../../src/app/tasks/collectBlocks.ts","../../src/app/utils/getUrlForEndpoint.ts","../../src/app/tasks/loadBlockModules.ts","../../src/app/tasks/loadCSS.ts","../../src/app/tasks/loadBlockStyles.ts","../../config.ts","../../src/app/tasks/showSection.ts","../../src/app/tasks/waitForLCP.ts","../../src/helpers/sidekick/isSidekickLibraryActive.ts","../../src/helpers/sidekick/getLocation.ts","../../src/app/tasks/loadFonts.ts","../../src/app/tasks/sampleRUM.ts","../../src/app/tasks/setupHlxObj.ts","../../src/app/tasks/initSampleRUM.ts","../../src/app/tasks/loadBlock.ts","../../src/app/tasks/loadBlocks.ts","../../src/app/tasks/decorateImages.ts","../../src/app/tasks/adjustMarkup.ts","../../src/utils/toCamelCase.ts","../../src/app/tasks/readBlockConfig.ts","../../src/app/tasks/processSectionMetaData.ts","../../src/app/tasks/transformSections.ts","../../src/app/tasks/decorateBlocks.ts","../../src/app/index.ts","../../src/app/init.ts","../../src/main.ts"],"sourcesContent":["/**\n * Converts a string into a valid CSS class name.\n *\n * @param name - The string to convert into a CSS class name.\n * @returns The converted CSS class name.\n *\n * @example\n * // Example usage:\n * const inputString = 'Hello, World!';\n * const cssClassName = toClassName(inputString);\n * console.log(cssClassName); // Output: 'hello-world'\n */\nexport function toClassName(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^0-9a-z]/gi, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Adds CSS classes to an HTML element.\n *\n * @param {HTMLElement} element - The HTML element to which classes will be added.\n * @param {string} classes - A string containing CSS classes separated by commas.\n *\n * @example\n * const element = document.getElementById('myElement');\n * const classesToAdd = 'class1, class2, class3';\n * addClasses(element, classesToAdd);\n */\nexport const addClasses = (element: HTMLElement, classes: string): void => {\n  classes.split(',').forEach((cssClass: string): void => {\n    element.classList.add(toClassName(cssClass.trim()));\n  });\n};\n","/**\n * Retrieves the content of a specified metadata tag from the document head.\n *\n * @param {string} value - The name or property attribute value of the metadata tag.\n * @param {Document} [doc=document] - The document to search for the metadata tag (default is the current document).\n * @returns {string} - The content of the metadata tag, if found; otherwise, an empty string.\n *\n * @example\n * Example 1:\n * Assuming <meta name=\"description\" content=\"This is a sample description.\"> exists in the document head.\n * const metaContent = getMetadata('description');\n * console.log(metaContent);\n * Output: 'This is a sample description.'\n *\n * @example\n * Example 2:\n * Assuming <meta property=\"og:title\" content=\"Open Graph Title\"> exists in the document head.\n * const metaContent = getMetadata('og:title', document);\n * console.log(metaContent);\n * Output: 'Open Graph Title'\n */\nexport function getMetadata(value: string, doc: Document = document): string {\n  const attr: 'property' | 'name' = value && value.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${value}\"]`)] as HTMLMetaElement[]) || [];\n  const meta: string = metaTags.map((metaElement: HTMLMetaElement) => metaElement.content).join(', ');\n  return meta.length ? meta : '';\n}\n","import { addClasses } from '../../utils/addClasses';\nimport { getMetadata } from '../../utils/getMetadata';\n\n/**\n * Decorates the template and theme by adding classes to the body.\n * The classes are defined in the meta tags of the document.\n * Usefull for styling the page based on the template and theme meta tags\n * that can be set in the metadata table in EDS.\n * @example\n * <meta name=\"template\" content=\"template-name\">\n * <meta name=\"theme\" content=\"theme-name\">\n * @example\n * <body class=\"template-name theme-name\">\n */\nexport function decorateTemplateAndTheme() {\n  const template = getMetadata('template');\n  if (template) addClasses(document.body, template);\n  const theme = getMetadata('theme');\n  if (theme) addClasses(document.body, theme);\n}\n","/**\n * Decorates paragraphs containing a single link as buttons.\n * @param {Element} element container element\n */\nexport function decorateButtons(element) {\n  element.querySelectorAll('a').forEach((a) => {\n    a.title = a.title || a.textContent;\n    if (a.href !== a.textContent) {\n      const up = a.parentElement;\n      const twoup = a.parentElement.parentElement;\n      if (!a.querySelector('img')) {\n        if (up.childNodes.length === 1 && (up.tagName === 'P' || up.tagName === 'DIV')) {\n          a.className = 'button'; // default\n          up.classList.add('button-container');\n        }\n        if (\n          up.childNodes.length === 1 &&\n          up.tagName === 'STRONG' &&\n          twoup.childNodes.length === 1 &&\n          twoup.tagName === 'P'\n        ) {\n          a.className = 'button primary';\n          twoup.classList.add('button-container');\n        }\n        if (\n          up.childNodes.length === 1 &&\n          up.tagName === 'EM' &&\n          twoup.childNodes.length === 1 &&\n          twoup.tagName === 'P'\n        ) {\n          a.className = 'button secondary';\n          twoup.classList.add('button-container');\n        }\n      }\n    }\n  });\n}\n","/**\n * Returns undefined if the value is an empty string, otherwise returns the value itself.\n *\n * @param {string} value - The value to check.\n * @returns {string | undefined} - If the value is an empty string, returns undefined\n * otherwise, returns the value itself.\n *\n * @example\n * // Example usage:\n * const emptyValue = '';\n * const nonEmptyValue = 'Hello, World!';\n *\n * const result1 = undefinedOnEmpty(emptyValue);\n * console.log(result1); // Output: undefined\n *\n * const result2 = undefinedOnEmpty(nonEmptyValue);\n * console.log(result2); // Output: 'Hello, World!'\n */\nexport function undefinedOnEmpty(value: string): string | undefined {\n  return value.trim() === '' ? undefined : value;\n}\n","import { getMetadata } from '../../utils/getMetadata';\nimport { undefinedOnEmpty } from '../../utils/undefinedOnEmpty';\n\n/*\n * This function sets the language of the document based on the language metadata.\n */\nexport function setDocLanguage() {\n  const lang = getMetadata('language');\n  document.documentElement.lang = undefinedOnEmpty(lang) || 'en';\n}\n","import { BlockMapping } from '../app.types';\n\n/**\n * Collect all blocks in a section.\n * @param section - The section to collect the blocks from.\n * @returns BlockMapping[]\n * @example\n * const blocks = collectBlocks(section);\n * console.log(blocks);\n * Output: [{ name: 'block1', element: HTMLElement }, { name: 'block2', element: HTMLElement }]\n */\nexport function collectBlocks(section: HTMLElement): BlockMapping[] {\n  const blockMap: BlockMapping[] = [];\n  const blocksElements = section.querySelectorAll<HTMLDivElement>('[data-block-name]');\n\n  blocksElements.forEach((block: HTMLDivElement) => {\n    blockMap.push({\n      name: block.dataset['blockName'] as string,\n      element: block,\n    });\n  });\n\n  return blockMap;\n}\n","/**\n * Get the URL for an endpoint.\n * @param endpoint - The endpoint.\n * @returns URL\n * @example\n * const url = getUrlForEndpoint('block1/block1.css');\n * console.log(url);\n * Output: URL { href: 'http://localhost:3000/block1/block1.css' }\n */\nexport const getUrlForEndpoint = (endpoint: string): URL => {\n  const baseUrl = new URL(window.hlx.codeBasePath, window.location.origin);\n  return new URL(endpoint, baseUrl);\n};\n","import { DebuggerService } from '@kluntje/services';\nimport { BlockMapping } from '../app.types';\nimport { getUrlForEndpoint } from '../utils/getUrlForEndpoint';\n\n/*\n * Load the es module for the block. The module should be named as the block name.\n * @param block - The block to load the module for.\n * @returns Promise<void>\n */\nexport async function loadBlockModules(block: BlockMapping): Promise<void> {\n  const status = block.element.dataset.blockStatus;\n  if (status !== 'loading' && status !== 'loaded') {\n    try {\n      block.element.dataset.blockStatus = 'loading';\n      const { href } = getUrlForEndpoint(`dist/${block.name}/${block.name}.js`);\n      const blockModule = await import(href);\n\n      if (blockModule.default) {\n        await blockModule.default(block.element);\n      }\n\n      block.element.dataset.blockStatus = 'loaded';\n    } catch (error) {\n      block.element.dataset.blockStatus = 'error';\n      DebuggerService.error('laodBloackModules:', error);\n    }\n  }\n}\n","import { getUrlForEndpoint } from '../utils/getUrlForEndpoint';\n\n/**\n * Load a CSS file if it is not already loaded append it to the head.\n * @param endpoint - The endpoint of the CSS file.\n * @returns Promise<boolean>\n */\nexport async function loadCSS(endpoint: string) {\n  return new Promise((resolve, reject) => {\n    const { href } = getUrlForEndpoint(endpoint);\n\n    if (!document.querySelector(`head > link[href=\"${href}\"]`)) {\n      const link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.href = href;\n      link.onload = resolve;\n      link.onerror = reject;\n      document.head.append(link);\n    } else {\n      resolve(true);\n    }\n  });\n}\n","import { BlockMapping } from '../app.types';\nimport { loadCSS } from './loadCSS';\n\n/**\n * Load the block styles. The styles should be named as the block name.\n * @param block - The block to load the styles for.\n * @returns Promise<void>\n */\nexport async function loadBlockStyles(block: BlockMapping) {\n  try {\n    await loadCSS(`dist/${block.name}/${block.name}.css`);\n  } catch (error) {\n    //do nothing\n  }\n}\n","export interface Config {\n  mainTsPath: string;\n  mainScssPath: string;\n  iconsDirPath: string;\n  iconsTypesPath: string;\n  fontsScssPath?: string;\n  fontsCssPath?: string;\n  lazyStylesScssPath?: string;\n  lazyStylesCssPath?: string;\n  sidekickLibraryStylesScssPath?: string;\n  sidekickLibraryStylesCssPath?: string;\n  lcpBlocks?: string[];\n}\n\nexport const config: Config = {\n  mainTsPath: './src/main.ts',\n  mainScssPath: './src/styles/sass/main.scss',\n  iconsDirPath: './public/icons',\n  iconsTypesPath: './src/types/icons.types.ts',\n  fontsScssPath: './src/styles/sass/fonts.scss',\n  fontsCssPath: './dist/fonts/fonts.css',\n  lazyStylesScssPath: './src/styles/sass/lazy-styles.scss',\n  lazyStylesCssPath: './dist/lazyStyles/lazyStyles.css',\n  sidekickLibraryStylesScssPath: './src/styles/sass/sidekick-library-styles.scss',\n  sidekickLibraryStylesCssPath: './dist/sidekickLibraryStyles/sidekickLibraryStyles.css',\n  lcpBlocks: [],\n};\n","/**\n * Removes the display property from the section\n * @param section - The section to show\n */\nexport function showSection(section: HTMLElement) {\n  section.style.removeProperty('display');\n}\n","import { collectBlocks } from './collectBlocks';\nimport { loadBlockModules } from './loadBlockModules';\nimport { loadBlockStyles } from './loadBlockStyles';\nimport { config } from '../../../config';\nimport { showSection } from './showSection';\nimport { LcpCandidate } from '../app.types';\n\n/**\n * Wait for the Largest Contentful Paint (LCP) candidate to be loaded.\n * This function will load the modules and styles for the first section after the LCP candidate.\n * @returns Promise<void>\n */\nexport async function waitForLCP() {\n  const firstSection: HTMLElement | null = document.querySelector('.section');\n  const { lcpBlocks } = config;\n\n  if (firstSection) {\n    const blocks = collectBlocks(firstSection);\n    const blockPromises = blocks.map(async (block) => {\n      const hasLCPBlock = lcpBlocks?.includes(block.name);\n      if (hasLCPBlock) await Promise.all([loadBlockModules(block), loadBlockStyles(block)]);\n    });\n\n    await Promise.all(blockPromises);\n    showSection(firstSection);\n  }\n\n  // @ts-ignore\n  document.body.style.display = null;\n  const lcpCandidate = document.querySelector<LcpCandidate>('main img');\n\n  await new Promise<void>((resolve) => {\n    if (lcpCandidate && !lcpCandidate.complete) {\n      lcpCandidate.setAttribute('loading', 'eager');\n      lcpCandidate.setAttribute('fetchpriority', 'high');\n      lcpCandidate.addEventListener('load', () => resolve());\n      lcpCandidate.addEventListener('error', () => resolve());\n    } else {\n      resolve();\n    }\n  });\n}\n","/**\n * Verifies if the Sidekick Library Plugin is in use by checking if the page is running in an iframe with srcdoc\n * and if the main element has the sidekick-library class.\n * @returns {boolean} Whether the Sidekick Library Plugin is in use.\n */\nexport const isSidekickLibraryActive = (): boolean => {\n  const main = document.querySelector('#main');\n  if (!main) return false;\n  return window.location.href === 'about:srcdoc' && main.classList.contains('sidekick-library');\n};\n","import { isSidekickLibraryActive } from './isSidekickLibraryActive.ts';\n\n/**\n * Returns the true origin of the current page in the browser.\n * If the page is running in an iframe with srcdoc, the query param is returned.\n * @returns {String} The query param of the current page or the query param of the block running in the library\n *\n * @example\n * const searchParams = new URLSearchParams(getLocation().search);\n *\n * @remarks\n * Needs to be used when the Sidekick Library Plugin is in use.\n */\nexport function getLocation(): Location {\n  return isSidekickLibraryActive() ? window.parent.location : window.location;\n}\n","import { getLocation } from 'Helpers/sidekick/getLocation';\nimport { loadCSS } from './loadCSS';\nimport { config } from '../../../config';\n\nexport async function loadFonts(): Promise<void> {\n  const { fontsCssPath } = config;\n  if (!fontsCssPath) return;\n  await loadCSS(fontsCssPath);\n  try {\n    if (!getLocation().hostname.includes('localhost')) sessionStorage.setItem('fonts-loaded', 'true');\n  } catch (e) {\n    console.error('Error setting fonts-loaded in session storage', e);\n    // do nothing\n  }\n}\n","/**\n * log RUM if part of the sample.\n * @param {string} checkpoint identifies the checkpoint in funnel\n * @param {Object} data additional data for RUM sample\n * @param {string} data.source DOM node that is the source of a checkpoint event,\n * identified by #id or .classname\n * @param {string} data.target subject of the checkpoint event,\n * for instance the href of a link, or a search term\n */\n\nexport function sampleRUM(checkpoint, data = {}) {\n  // @ts-ignore\n  sampleRUM.defer = sampleRUM.defer || [];\n  const defer = (fnname) => {\n    // @ts-ignore\n    sampleRUM[fnname] = sampleRUM[fnname] || ((...args) => sampleRUM.defer.push({ fnname, args }));\n  };\n  // @ts-ignore\n  sampleRUM.drain =\n    // @ts-ignore\n    sampleRUM.drain ||\n    ((dfnname, fn) => {\n      sampleRUM[dfnname] = fn;\n      // @ts-ignore\n      sampleRUM.defer\n        .filter(({ fnname }) => dfnname === fnname)\n        .forEach(({ fnname, args }) => sampleRUM[fnname](...args));\n    });\n  // @ts-ignore\n  sampleRUM.always = sampleRUM.always || [];\n  // @ts-ignore\n  sampleRUM.always.on = (chkpnt, fn) => {\n    // @ts-ignore\n    sampleRUM.always[chkpnt] = fn;\n  };\n  // @ts-ignore\n  sampleRUM.on = (chkpnt, fn) => {\n    // @ts-ignore\n    sampleRUM.cases[chkpnt] = fn;\n  };\n  defer('observe');\n  defer('cwv');\n  try {\n    window.hlx = window.hlx || {};\n    // @ts-ignore\n    if (!window.hlx.rum) {\n      const usp = new URLSearchParams(window.location.search);\n      const weight = usp.get('rum') === 'on' ? 1 : 100; // with parameter, weight is 1. Defaults to 100.\n      const id = Array.from({ length: 75 }, (_, i) => String.fromCharCode(48 + i))\n        .filter((a) => /\\d|[A-Z]/i.test(a))\n        .filter(() => Math.random() * 75 > 70)\n        .join('');\n      const random = Math.random();\n      const isSelected = random * weight < 1;\n      const firstReadTime = Date.now();\n      const urlSanitizers = {\n        full: () => window.location.href,\n        origin: () => window.location.origin,\n        path: () => window.location.href.replace(/\\?.*$/, ''),\n      };\n      // @ts-ignore\n      window.hlx.rum = {\n        weight,\n        id,\n        random,\n        isSelected,\n        firstReadTime,\n        sampleRUM,\n        sanitizeURL: urlSanitizers[window.hlx.RUM_MASK_URL || 'path'],\n      };\n    }\n    // @ts-ignore\n    const { weight, id, firstReadTime } = window.hlx.rum;\n    // @ts-ignore\n    if (window.hlx && window.hlx.rum && window.hlx.rum.isSelected) {\n      const knownProperties = [\n        'weight',\n        'id',\n        'referer',\n        'checkpoint',\n        't',\n        'source',\n        'target',\n        'cwv',\n        'CLS',\n        'FID',\n        'LCP',\n        'INP',\n      ];\n      const sendPing = (pdata = data) => {\n        const body = JSON.stringify(\n          {\n            weight,\n            id,\n            // @ts-ignore\n            referer: window.hlx.rum.sanitizeURL(),\n            checkpoint,\n            t: Date.now() - firstReadTime,\n            ...data,\n          },\n          knownProperties\n        );\n        const url = `https://rum.hlx.page/.rum/${weight}`;\n        navigator.sendBeacon(url, body);\n        // eslint-disable-next-line no-console\n        console.debug(`ping:${checkpoint}`, pdata);\n      };\n      // @ts-ignore\n      sampleRUM.cases = sampleRUM.cases || {\n        // @ts-ignore\n        cwv: () => sampleRUM.cwv(data) || true,\n        lazy: () => {\n          // use classic script to avoid CORS issues\n          const script = document.createElement('script');\n          script.src = 'https://rum.hlx.page/.rum/@adobe/helix-rum-enhancer@^1/src/index.js';\n          document.head.appendChild(script);\n          return true;\n        },\n      };\n      sendPing(data);\n      // @ts-ignore\n      if (sampleRUM.cases[checkpoint]) {\n        // @ts-ignore\n        sampleRUM.cases[checkpoint]();\n      }\n    }\n    // @ts-ignore\n    if (sampleRUM.always[checkpoint]) {\n      // @ts-ignore\n      sampleRUM.always[checkpoint](data);\n    }\n  } catch (error) {\n    // something went wrong\n  }\n}\n","export default function setupHlxObj(mainScriptPath: string = '/dist/main/main.js') {\n  window.hlx = window.hlx || {};\n  window.hlx.RUM_MASK_URL = 'full';\n  window.hlx.codeBasePath = '';\n  window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n  const scriptEl = document.querySelector(`script[src$=\"${mainScriptPath}\"]`) as HTMLScriptElement;\n  if (scriptEl) {\n    try {\n      [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split(mainScriptPath);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('setupHlxObj', error);\n    }\n  }\n}\n","import { sampleRUM } from './sampleRUM';\nimport setupHlxObj from './setupHlxObj';\n\nexport function initSampleRUM() {\n  setupHlxObj();\n  sampleRUM('top');\n\n  window.addEventListener('load', () => sampleRUM('load'));\n\n  window.addEventListener('unhandledrejection', (event) => {\n    sampleRUM('error', { source: event.reason.sourceURL, target: event.reason.line });\n  });\n\n  window.addEventListener('error', (event) => {\n    sampleRUM('error', { source: event.filename, target: event.lineno });\n  });\n}\n","import { BlockMapping } from '../app.types';\nimport { collectBlocks } from './collectBlocks';\nimport { loadBlockModules } from './loadBlockModules';\nimport { loadBlockStyles } from './loadBlockStyles';\nimport { showSection } from './showSection';\n\n/**\n * Load the block modules and styles for a section and show the section.\n * @param section - The section to load the block modules and styles for.\n * @returns Promise<void>\n */\nexport async function loadBlock(section: HTMLElement) {\n  const sectionsBlocks: BlockMapping[] = collectBlocks(section);\n\n  if (!sectionsBlocks.length) {\n    showSection(section);\n    return;\n  }\n\n  for (const block of sectionsBlocks) {\n    Promise.all([loadBlockModules(block), loadBlockStyles(block)]);\n  }\n\n  showSection(section);\n}\n","import { loadBlock } from './loadBlock';\n\n/**\n * Loads Blocks\n * by getting all sections and load every block in every section\n * and shows every section that is finished loading.\n */\nexport async function loadBlocks() {\n  const sections = [...document.querySelectorAll<HTMLElement>('.section')];\n  const SectionsPromises = sections.map((section) => loadBlock(section));\n\n  await Promise.all(SectionsPromises);\n}\n","/*\n * This function is used to decorate images in the default content.\n * It adds the class 'image' and 'main' to the parent element of the image.\n */\nexport function decorateImages() {\n  const picture = document.querySelectorAll('.default-content-wrapper picture');\n  picture.forEach((item) => {\n    const parentElement = item.parentElement;\n    if (parentElement) {\n      parentElement.classList.add('image', 'main');\n    }\n  });\n}\n","import { decorateImages } from './decorateImages';\n\n/**\n * This function is used to adjust the markup of a section.\n * It wraps the default content in a div with the class 'default-content-wrapper'.\n * It also adds the class 'section' to the section element.\n * It decorates the images in the default content by calling the 'decorateImages' function.\n * It sets the 'data-section-status' attribute to 'initialized'.\n * It hides the section element.\n * @param section - The section element to adjust.\n */\nexport function adjustMarkup(section: HTMLDivElement) {\n  const wrappers: HTMLDivElement[] = [];\n  let defaultContent = false;\n  [...section.children].forEach((e) => {\n    if (e.tagName === 'DIV' || !defaultContent) {\n      const wrapper = document.createElement('div');\n      wrappers.push(wrapper);\n      defaultContent = e.tagName !== 'DIV';\n\n      if (defaultContent) {\n        wrapper.classList.add('default-content-wrapper');\n      }\n    }\n    wrappers[wrappers.length - 1].append(e);\n  });\n  wrappers.forEach((wrapper) => section.append(wrapper));\n  decorateImages();\n  section.classList.add('section');\n  section.dataset.sectionStatus = 'initialized';\n  section.style.display = 'none';\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Sanitizes a string for use as a JavaScript property name.\n *\n * @param {string} name - The unsanitized string.\n * @returns {string} - The camelCased name.\n *\n * @example\n * // Example usage:\n * const unsanitizedString = 'background-color';\n * const camelCasedName = toCamelCase(unsanitizedString);\n * console.log(camelCasedName); // Output: 'backgroundColor'\n */\nexport function toCamelCase(name: string): string {\n  if (/^[a-z][A-Za-z0-9]*$/.test(name)) {\n    return name;\n  }\n\n  if (/^[A-Z][A-Za-z0-9]*$/.test(name)) {\n    return name.charAt(0).toLowerCase() + name.slice(1);\n  }\n\n  return toClassName(name).replace(/-([a-z])/g, (g: string) => g[1].toUpperCase());\n}\n","import { toClassName } from 'Utils/toClassName';\n\n/*\n  This function reads the configuration of a block from the HTML file\n  and returns it as a Record<string, any> object.\n  @param {Element} block The block element\n*/\nexport function readBlockConfig(block: Element): Record<string, any> {\n  const config: Record<any, any> = {};\n  block.querySelectorAll(':scope > div').forEach((row) => {\n    if (row.children) {\n      const cols = [...row.children];\n      if (cols[1]) {\n        const col = cols[1];\n        const name = toClassName(cols[0].textContent ?? '');\n        let value: any = '';\n        if (col.querySelector('a')) {\n          const as = [...col.querySelectorAll('a')];\n          if (as.length === 1) {\n            value = as[0].href;\n          } else {\n            value = as.map((a) => a.href);\n          }\n        } else if (col.querySelector('img')) {\n          const imgs = [...col.querySelectorAll('img')];\n          if (imgs.length === 1) {\n            value = imgs[0].src;\n          } else {\n            value = imgs.map((img) => img.src);\n          }\n        } else if (col.querySelector('p')) {\n          const ps = [...col.querySelectorAll('p')];\n          if (ps.length === 1) {\n            value = ps[0].textContent;\n          } else {\n            value = ps.map((p) => p.textContent);\n          }\n        } else value = row.children[1].textContent;\n        config[name] = value;\n      }\n    }\n  });\n  return config;\n}\n","import { toCamelCase } from 'Utils/toCamelCase';\nimport { toClassName } from 'Utils/toClassName';\nimport { readBlockConfig } from './readBlockConfig';\n\n/*\n  This function processes the metadata of a section and applies it to the section element.\n  @param {HTMLElement} section The section element\n*/\nexport function processSectionMetaData(section: HTMLElement) {\n  const sectionMeta = section.querySelector('div.section-metadata');\n  if (sectionMeta) {\n    const meta = readBlockConfig(sectionMeta);\n    Object.keys(meta).forEach((key) => {\n      if (key === 'style') {\n        const styles = meta.style\n          .split(',')\n          .filter((style: string) => style)\n          .map((style: string) => toClassName(style.trim()));\n        styles.forEach((style: string) => section.classList.add(style));\n      } else {\n        section.dataset[toCamelCase(key)] = meta[key];\n      }\n    });\n    if (sectionMeta.parentElement) sectionMeta.parentElement.remove();\n  }\n}\n","import { adjustMarkup } from './adjustMarkup';\nimport { processSectionMetaData } from './processSectionMetaData';\n\n/**\n * This function is used to transform the sections of the main element.\n * It adjusts the markup of each section by calling the 'adjustMarkup' function.\n * It processes the metadata of each section by calling the 'processSectionMetaData' function.\n * @param main - The main element to transform.\n */\nexport function transformSection(main: HTMLElement) {\n  main.querySelectorAll<HTMLDivElement>(':scope > div').forEach((section) => {\n    adjustMarkup(section);\n    processSectionMetaData(section);\n  });\n}\n","/**\n * Decorate blocks with classes and data attributes.\n * @param main - Html main element\n */\nexport function decorateBlocks(main: HTMLElement) {\n  main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach((block) => {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  });\n}\n","import { decorateTemplateAndTheme } from './tasks/decorateTemplateAndTheme';\nimport { decorateButtons } from './tasks/decorateButtons';\nimport { setDocLanguage } from './tasks/setDocLanguage';\nimport { waitForLCP } from './tasks/waitForLCP';\nimport { loadFonts } from './tasks/loadFonts';\nimport { initSampleRUM } from './tasks/initSampleRUM';\nimport { DebuggerService } from '@kluntje/services';\nimport { loadCSS } from './tasks/loadCSS';\nimport { isSidekickLibraryActive } from 'Helpers/sidekick/isSidekickLibraryActive';\nimport { config } from '../../config';\nimport { loadBlocks } from './tasks/loadBlocks';\nimport { transformSection } from './tasks/transformSections';\nimport { decorateBlocks } from './tasks/decorateBlocks';\nimport { sampleRUM } from './tasks/sampleRUM';\n\nclass HLX {\n  private beforeEagerCallbacks: Array<() => Promise<void>> = [];\n  private loadEagerCallbacks: Array<() => Promise<void>> = [];\n  private beforeLoadLazyCallbacks: Array<() => Promise<void>> = [];\n  private loadLazyCallbacks: Array<() => Promise<void>> = [];\n  private beforeLoadDelayedCallbacks: Array<() => Promise<void>> = [];\n  private loadDelayedCallbacks: Array<() => Promise<void>> = [];\n  private initializedCallbacks: Array<() => Promise<void>> = [];\n\n  private beforeEagerPromise?: Promise<void>;\n  private eagerPromise?: Promise<void>;\n  private beforeLazyPromise?: Promise<void>;\n  private lazyPromise?: Promise<void>;\n  private beforeDelayedPromise?: Promise<void>;\n  private delayedPromise?: Promise<void>;\n  private initializedPromise?: Promise<void>;\n\n  private get beforeEager() {\n    if (this.beforeEagerPromise === undefined) {\n      this.beforeEagerPromise = this.beforeLoadEager();\n    }\n    return this.beforeEagerPromise;\n  }\n\n  private get loadEager() {\n    if (this.eagerPromise === undefined) {\n      this.eagerPromise = this.loadEagerPromise();\n    }\n    return this.eagerPromise;\n  }\n\n  private get beforeLoadLazy() {\n    if (this.beforeLazyPromise === undefined) {\n      this.beforeLazyPromise = this.beforeLoadLazyPromise();\n    }\n    return this.beforeLazyPromise;\n  }\n\n  private get loadLazy() {\n    if (this.lazyPromise === undefined) {\n      this.lazyPromise = this.loadLazyPromise();\n    }\n    return this.lazyPromise;\n  }\n\n  private get beforeLoadDelayed() {\n    if (this.beforeDelayedPromise === undefined) {\n      this.beforeDelayedPromise = this.beforeLoadDelayedPromise();\n    }\n    return this.beforeDelayedPromise;\n  }\n\n  private get loadDelayed() {\n    if (this.delayedPromise === undefined) {\n      this.delayedPromise = this.loadDelayedPromise();\n    }\n    return this.delayedPromise;\n  }\n\n  private get initialized() {\n    if (this.initializedPromise === undefined) {\n      this.initializedPromise = this.getInitializedPromise();\n    }\n    return this.initializedPromise;\n  }\n\n  public addBeforeEagerTask(cb: () => Promise<void>) {\n    this.beforeEagerCallbacks.push(cb);\n  }\n\n  public addLoadEagerTask(cb: () => Promise<void>) {\n    this.loadEagerCallbacks.push(cb);\n  }\n\n  public addBeforeLoadLazyTask(cb: () => Promise<void>) {\n    this.beforeLoadLazyCallbacks.push(cb);\n  }\n\n  public addLoadLazyTask(cb: () => Promise<void>) {\n    this.loadLazyCallbacks.push(cb);\n  }\n\n  public addBeforeLoadDelayedTask(cb: () => Promise<void>) {\n    this.beforeLoadDelayedCallbacks.push(cb);\n  }\n\n  public addLoadDelayedTask(cb: () => Promise<void>) {\n    this.loadDelayedCallbacks.push(cb);\n  }\n\n  public addInitializedTask(cb: () => Promise<void>) {\n    this.initializedCallbacks.push(cb);\n  }\n\n  public async init() {\n    await this.beforeEager;\n    await this.loadEager;\n    await this.beforeLoadLazy;\n    await this.loadLazy;\n    await this.beforeLoadDelayed;\n    await this.loadDelayed;\n    await this.initialized;\n  }\n\n  private async beforeLoadEager(): Promise<void> {\n    const beforeLoadEagerTask: Promise<void> = new Promise((resolve) => {\n      initSampleRUM();\n      decorateTemplateAndTheme();\n      setDocLanguage();\n      resolve();\n    });\n\n    await Promise.all([...this.beforeEagerCallbacks.map((cb) => cb()), beforeLoadEagerTask]);\n  }\n\n  private async loadEagerPromise(): Promise<void> {\n    const loadEagerTask: Promise<void> = new Promise(async (resolve) => {\n      const main = document.querySelector('main') as HTMLElement;\n      decorateButtons(main);\n      transformSection(main);\n      decorateBlocks(main);\n      setTimeout(() => {\n        document.body.classList.add('show');\n        resolve();\n      }, 100);\n\n      await waitForLCP();\n\n      try {\n        /* if desktop (proxy for fast connection) or fonts already loaded, load fonts.css */\n        if (window.innerWidth >= 900 || sessionStorage.getItem('fonts-loaded')) {\n          await loadFonts();\n        }\n      } catch (e) {\n        // do nothing\n      }\n    });\n\n    await Promise.all([...this.loadEagerCallbacks.map((cb) => cb()), loadEagerTask]);\n  }\n\n  private async beforeLoadLazyPromise(): Promise<void> {\n    const beforeLoadLazyTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.beforeLoadLazyCallbacks.map((cb) => cb()), beforeLoadLazyTask]);\n  }\n\n  private async loadLazyPromise(): Promise<void> {\n    const loadLazyTask: Promise<void> = new Promise(async (resolve) => {\n      try {\n        const {\n          lazyStylesScssPath,\n          sidekickLibraryStylesScssPath,\n          fontsScssPath,\n          lazyStylesCssPath,\n          sidekickLibraryStylesCssPath,\n        } = config;\n\n        await loadBlocks();\n\n        const { hash } = window.location;\n        const element = hash ? document.getElementById(hash.substring(1)) : false;\n        if (hash && element) element.scrollIntoView();\n\n        if (lazyStylesScssPath && lazyStylesCssPath) await loadCSS(lazyStylesCssPath);\n        if (sidekickLibraryStylesScssPath && sidekickLibraryStylesCssPath && isSidekickLibraryActive()) {\n          await loadCSS(sidekickLibraryStylesCssPath);\n        }\n        if (fontsScssPath) await loadFonts();\n        sampleRUM('lazy');\n        const main = document.querySelector('main') as HTMLElement;\n        // @ts-ignore\n        sampleRUM.observe(main.querySelectorAll('div[data-block-name]'));\n        // @ts-ignore\n        sampleRUM.observe(main.querySelectorAll('picture > img'));\n      } catch (error) {\n        DebuggerService.error('Load lazy Task: ', error);\n      }\n      resolve();\n    });\n\n    await Promise.all([...this.loadLazyCallbacks.map((cb) => cb()), loadLazyTask]);\n  }\n\n  private async beforeLoadDelayedPromise(): Promise<void> {\n    const beforeLoadDelayedTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.beforeLoadDelayedCallbacks.map((cb) => cb()), beforeLoadDelayedTask]);\n  }\n\n  private async loadDelayedPromise(): Promise<void> {\n    const loadDelayedTask: Promise<void> = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 3000);\n    });\n\n    await Promise.all([...this.loadDelayedCallbacks.map((cb) => cb()), loadDelayedTask]);\n  }\n\n  private async getInitializedPromise(): Promise<void> {\n    const initializedTask: Promise<void> = new Promise((resolve) => resolve());\n\n    await Promise.all([...this.initializedCallbacks.map((cb) => cb()), initializedTask]);\n  }\n}\n\nexport default new HLX();\n","import HLX from './index.ts';\n\nconst READY_STATES = {\n  interactive: 'interactive',\n  complete: 'complete',\n};\n\nfunction init() {\n  HLX.addBeforeEagerTask(() => {\n    const main = document.getElementsByTagName('main')[0];\n    main.setAttribute('id', 'main');\n    return Promise.resolve();\n  });\n\n  HLX.init();\n}\n\nexport function initHLXApp() {\n  if (document.readyState === READY_STATES.interactive || document.readyState === READY_STATES.complete) {\n    init();\n  } else {\n    document.addEventListener('readystatechange', () => {\n      const readyState = document.readyState;\n      if (readyState === READY_STATES.interactive || readyState === READY_STATES.complete) {\n        init();\n      }\n    });\n  }\n}\n","import './components/icon/icon.ts';\nimport { initHLXApp } from './app/init.ts';\n\ninitHLXApp();\n\ndeclare global {\n  interface Window {\n    hlx: {\n      RUM_MASK_URL: string;\n      codeBasePath: string;\n      lighthouse: boolean;\n    };\n  }\n}\n"],"file":"main/main.js"}