{"version":3,"mappings":"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","names":["toClassName","name","BlockService","block","config","row","cols","col","value","as","a","imgs","img","ps","p","main","shortBlockName","blockWrapper","section","toCamelCase","g","SectionService","blockService","container","sectionMeta","meta","key","style","wrappers","defaultContent","e","wrapper","item","parentElement","isSidekickLibraryActive","addClasses","element","classes","cssClass","getMetadata","doc","attr","metaElement","getLocation","getUrlForEndpoint","endpoint","baseUrl","_Status","Status","MainService","sectionService","lazyStylesScssPath","sidekickLibraryStylesScssPath","fontsScssPath","error","SectionsPromises","template","theme","blockMap","href","blockModule","resolve","reject","link","firstSection","blockPromises","lcpCandidate","sectionsBlocks","setupHlxObj","mainScriptPath","scriptEl","decorateBodyTag","undefinedOnEmpty","setDocLanguage","lang","HLX","HLX$1"],"sources":["../../src/utils/toClassName.ts","../../src/services/block.service.ts","../../src/utils/toCamelCase.ts","../../src/services/section.service.ts","../../src/sidekickHelpers/isSidekickLibraryActive.ts","../../src/utils/addClasses.ts","../../src/utils/getMetadata.ts","../../config.ts","../../src/sidekickHelpers/getLocation.ts","../../src/app/utils/getUrlForEndpoint.ts","../../src/services/main.service.ts","../../src/app/setupHlxObj.ts","../../src/app/decorateBodyTag.ts","../../src/utils/undefinedOnEmpty.ts","../../src/app/setDocLanguage.ts","../../src/app/index.ts","../../src/main.ts"],"sourcesContent":["/**\n * Converts a string into a valid CSS class name.\n *\n * @param name - The string to convert into a CSS class name.\n * @returns The converted CSS class name.\n *\n * @example\n * // Example usage:\n * const inputString = 'Hello, World!';\n * const cssClassName = toClassName(inputString);\n * console.log(cssClassName); // Output: 'hello-world'\n */\nexport function toClassName(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^0-9a-z]/gi, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n","import { toClassName } from '../utils/toClassName';\n\nexport class BlockService {\n  //TODO: Provider for fetch data\n\n  /**\n   * Extracts the config from a block.\n   * @param {Element} block The block element\n   * @returns {object} The block config\n   */\n  readBlockConfig(block: Element): Record<string, any> {\n    const config: Record<any, any> = {};\n    block.querySelectorAll(':scope > div').forEach((row) => {\n      if (row.children) {\n        const cols = [...row.children];\n        if (cols[1]) {\n          const col = cols[1];\n          const name = toClassName(cols[0].textContent ?? '');\n          let value: any = '';\n          if (col.querySelector('a')) {\n            const as = [...col.querySelectorAll('a')];\n            if (as.length === 1) {\n              value = as[0].href;\n            } else {\n              value = as.map((a) => a.href);\n            }\n          } else if (col.querySelector('img')) {\n            const imgs = [...col.querySelectorAll('img')];\n            if (imgs.length === 1) {\n              value = imgs[0].src;\n            } else {\n              value = imgs.map((img) => img.src);\n            }\n          } else if (col.querySelector('p')) {\n            const ps = [...col.querySelectorAll('p')];\n            if (ps.length === 1) {\n              value = ps[0].textContent;\n            } else {\n              value = ps.map((p) => p.textContent);\n            }\n          } else value = row.children[1].textContent;\n          config[name] = value;\n        }\n      }\n    });\n    return config;\n  }\n\n  /**\n   * Decorates all blocks in a container element.\n   * @param {Element} main The container element\n   */\n  decorateBlocks(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach(this.decorateBlock);\n  }\n\n  /**\n   * Decorates a block.\n   * @param {Element} block The block element\n   */\n  private decorateBlock(block: HTMLElement) {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  }\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Sanitizes a string for use as a JavaScript property name.\n *\n * @param {string} name - The unsanitized string.\n * @returns {string} - The camelCased name.\n *\n * @example\n * // Example usage:\n * const unsanitizedString = 'background-color';\n * const camelCasedName = toCamelCase(unsanitizedString);\n * console.log(camelCasedName); // Output: 'backgroundColor'\n */\nexport function toCamelCase(name: string): string {\n  return toClassName(name).replace(/-([a-z])/g, (g: string) => g[1].toUpperCase());\n}\n","import { toCamelCase } from '../utils/toCamelCase';\nimport { toClassName } from '../utils/toClassName';\nimport { BlockService } from './block.service';\n\nexport class SectionService {\n  constructor(private blockService: BlockService) {}\n\n  init(container: HTMLElement) {\n    this.transformSection(container);\n  }\n\n  /**\n   * Decorates all sections in a container element.\n   * @param {Element} main The container element\n   */\n  private transformSection(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>(':scope > div').forEach((section) => {\n      this.adjustMarkup(section);\n      this.processSectionMetaData(section);\n    });\n  }\n\n  private processSectionMetaData(section: HTMLElement) {\n    // Process section metadata\n    const sectionMeta = section.querySelector('div.section-metadata');\n    if (sectionMeta) {\n      const meta = this.blockService.readBlockConfig(sectionMeta);\n      Object.keys(meta).forEach((key) => {\n        if (key === 'style') {\n          const styles = meta.style\n            .split(',')\n            .filter((style: string) => style)\n            .map((style: string) => toClassName(style.trim()));\n          styles.forEach((style: string) => section.classList.add(style));\n        } else {\n          section.dataset[toCamelCase(key)] = meta[key];\n        }\n      });\n      if (sectionMeta.parentElement) sectionMeta.parentElement.remove();\n    }\n  }\n\n  private adjustMarkup(section: HTMLDivElement) {\n    const wrappers: HTMLDivElement[] = [];\n    let defaultContent = false;\n    [...section.children].forEach((e) => {\n      if (e.tagName === 'DIV' || !defaultContent) {\n        const wrapper = document.createElement('div');\n        wrappers.push(wrapper);\n        defaultContent = e.tagName !== 'DIV';\n\n        if (defaultContent) {\n          wrapper.classList.add('default-content-wrapper');\n        }\n      }\n      wrappers[wrappers.length - 1].append(e);\n    });\n    wrappers.forEach((wrapper) => section.append(wrapper));\n    this.decorateImages();\n    section.classList.add('section');\n    section.dataset.sectionStatus = 'initialized';\n    section.style.display = 'none';\n  }\n  decorateImages() {\n    const picture = document.querySelectorAll('.default-content-wrapper picture');\n    picture.forEach((item) => {\n      const parentElement = item.parentElement;\n      if (parentElement) {\n        parentElement.classList.add('image', 'main');\n      }\n    });\n  }\n}\n","/**\n * Verifies if the Sidekick Library Plugin is in use by checking if the page is running in an iframe with srcdoc\n * and if the main element has the sidekick-library class.\n * @returns {boolean} Wether the Sidekick Library Plugin is in use.\n */\nexport const isSidekickLibraryActive = (): boolean => {\n  const main = document.querySelector('#main');\n  if (!main) return false;\n  return window.location.href === 'about:srcdoc' && main.classList.contains('sidekick-library');\n};\n","import { toClassName } from './toClassName';\n\n/**\n * Adds CSS classes to an HTML element.\n *\n * @param {HTMLElement} element - The HTML element to which classes will be added.\n * @param {string} classes - A string containing CSS classes separated by commas.\n *\n * @example\n * const element = document.getElementById('myElement');\n * const classesToAdd = 'class1, class2, class3';\n * addClasses(element, classesToAdd);\n */\nexport const addClasses = (element: HTMLElement, classes: string): void => {\n  classes.split(',').forEach((cssClass: string): void => {\n    element.classList.add(toClassName(cssClass.trim()));\n  });\n};\n","/**\n * Retrieves the content of a specified metadata tag from the document head.\n *\n * @param {string} name - The name or property attribute value of the metadata tag.\n * @param {Document} [doc=document] - The document to search for the metadata tag (default is the current document).\n * @returns {string} - The content of the metadata tag, if found; otherwise, an empty string.\n *\n * @example\n * // Example 1:\n * // Assuming <meta name=\"description\" content=\"This is a sample description.\"> exists in the document head.\n * const metaContent = getMetadata('description');\n * console.log(metaContent);\n * // Output: 'This is a sample description.'\n *\n * @example\n * // Example 2:\n * // Assuming <meta property=\"og:title\" content=\"Open Graph Title\"> exists in the document head.\n * const metaContent = getMetadata('og:title', document);\n * console.log(metaContent);\n * // Output: 'Open Graph Title'\n */\nexport function getMetadata(value: string, doc: Document = document): string {\n  const attr: 'property' | 'name' = value && value.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${value}\"]`)] as HTMLMetaElement[]) || [];\n  const meta: string = metaTags.map((metaElement: HTMLMetaElement) => metaElement.content).join(', ');\n  return meta.length ? meta : '';\n}\n","export interface Config {\n  mainTsPath: string;\n  mainScssPath: string;\n  iconsDirPath: string;\n  iconsTypesPath: string;\n  fontsScssPath?: string;\n  lazyStylesScssPath?: string;\n  sidekickLibraryStylesScssPath?: string;\n}\n\nexport const config: Config = {\n  mainTsPath: './src/main.ts',\n  mainScssPath: './src/styles/sass/main.scss',\n  iconsDirPath: './public/icons',\n  iconsTypesPath: './src/icons.types.ts',\n  fontsScssPath: './src/styles/sass/fonts.scss',\n  lazyStylesScssPath: './src/styles/sass/lazy-styles.scss',\n  sidekickLibraryStylesScssPath: './src/styles/sass/sidekick-library-styles.scss',\n};\n","import { isSidekickLibraryActive } from './isSidekickLibraryActive';\n\n/**\n * Returns the true origin of the current page in the browser.\n * If the page is running in an iframe with srcdoc, the query param is returned.\n * @returns {String} The query param of the current page or the query param of the block running in the library\n *\n * @example\n * const searchParams = new URLSearchParams(getLocation().search);\n *\n * @remarks\n * Needs to be used when the Sidekick Library Plugin is in use.\n */\nexport function getLocation(): Location {\n  return isSidekickLibraryActive() ? window.parent.location : window.location;\n}\n","export const getUrlForEndpoint = (endpoint: string): URL => {\n  // TODO: do we really need to use window.hlx.codeBasePath here?\n  const baseUrl = new URL(window.hlx.codeBasePath, window.location.origin);\n  return new URL(endpoint, baseUrl);\n};\n","import { isSidekickLibraryActive } from '../sidekickHelpers/isSidekickLibraryActive';\nimport { addClasses } from '../utils/addClasses';\nimport { getMetadata } from '../utils/getMetadata';\nimport { BlockService } from './block.service';\nimport { SectionService } from './section.service';\nimport { config } from '../../config.ts';\nimport { getLocation } from '../sidekickHelpers/getLocation.ts';\nimport { getUrlForEndpoint } from '../app/utils/getUrlForEndpoint.ts';\n\ntype BlockMapping = {\n  name: string;\n  element: HTMLDivElement;\n};\n\ninterface LcpCandidate extends HTMLElement {\n  complete: boolean;\n}\n\nclass Status {\n  static unloaded = 'unloaded';\n  static loading = 'loading';\n  static loaded = 'loaded';\n  static error = 'error';\n}\n\nexport class MainService {\n  private lcpBlocks = ['hello-world'];\n\n  constructor(\n    private sectionService: SectionService,\n    private blockService: BlockService\n  ) {}\n\n  init = async () => {\n    console.log('MainService init');\n    this.setup();\n    await this.loadEager();\n    await this.loadLazy();\n  };\n\n  /**\n   * Setup block utils.\n   */\n  private setup() {\n    // window.hlx = window.hlx || {};\n    // window.hlx.RUM_MASK_URL = 'full';\n    // window.hlx.codeBasePath = '';\n    // window.hlx.lighthouse = new URLSearchParams(getLocation().search).get('lighthouse') === 'on';\n    // const scriptEl = document.querySelector('script[src$=\"/scripts/scripts.js\"]') as HTMLScriptElement;\n    // if (scriptEl) {\n    //   try {\n    //     [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split('/scripts/scripts.js');\n    //   } catch (error) {\n    //     // eslint-disable-next-line no-console\n    //     console.log(error);\n    //   }\n    // }\n  }\n\n  private loadEager = async () => {\n    // TODO: how to support different languages here\n    document.documentElement.lang = 'en';\n    this.decorateTemplateAndTheme();\n    const main = document.querySelector('main');\n    if (main) {\n      main.setAttribute('id', 'main');\n      this.sectionService.init(main);\n      this.blockService.decorateBlocks(main);\n\n      // TODO: Performance adjustment\n      setTimeout(() => {\n        document.body.classList.add('show');\n      }, 100);\n\n      await this.waitForLCP();\n\n      try {\n        /* if desktop (proxy for fast connection) or fonts already loaded, load fonts.css */\n        if (window.innerWidth >= 900 || sessionStorage.getItem('fonts-loaded')) {\n          await this.loadFonts();\n        }\n      } catch (e) {\n        // do nothing\n      }\n    }\n  };\n\n  private loadLazy = async () => {\n    const { lazyStylesScssPath, sidekickLibraryStylesScssPath, fontsScssPath } = config;\n    try {\n      if (lazyStylesScssPath) await this.loadCSS('/dist/lazyStyles/lazyStyles.css');\n      if (sidekickLibraryStylesScssPath && isSidekickLibraryActive()) {\n        await this.loadCSS('/dist/sidekickLibraryStyles/sidekickLibraryStyles.css');\n      }\n      if (fontsScssPath) await this.loadFonts();\n      await this.loadBlocks();\n    } catch (error) {\n      console.error('Load lazy error: ', error);\n    }\n  };\n\n  /**\n   * Decorates the template and theme by adding classes to the body.\n   * The classes are defined in the meta tags of the document.\n   * @private\n   * @memberof MainService\n   * @returns {void}\n   * @example\n   * <meta name=\"template\" content=\"template-name\">\n   * <meta name=\"theme\" content=\"theme-name\">\n   * @example\n   * <body class=\"template-name theme-name\">\n   */\n  private decorateTemplateAndTheme() {\n    const template = getMetadata('template');\n    if (template) addClasses(document.body, template);\n    const theme = getMetadata('theme');\n    if (theme) addClasses(document.body, theme);\n  }\n\n  /**\n   * Loads Blocks\n   * by getting all sections and load every block in every section\n   * and shows every section that is finished loading.\n   */\n  private loadBlocks = async () => {\n    const sections = [...document.querySelectorAll<HTMLElement>('.section')];\n    const SectionsPromises = sections.map((section) => this.loadBlock(section));\n\n    await Promise.all(SectionsPromises);\n  };\n\n  private collectBlocks(section: HTMLElement): BlockMapping[] {\n    const blockMap: BlockMapping[] = [];\n    const blocksElements = section.querySelectorAll<HTMLDivElement>('[data-block-name]');\n\n    blocksElements.forEach((block: HTMLDivElement) => {\n      blockMap.push({\n        name: block.dataset['blockName'] as string,\n        element: block,\n      });\n    });\n\n    return blockMap;\n  }\n\n  private async loadBlockModules(block: BlockMapping) {\n    const status = block.element.dataset.blockStatus ?? Status.unloaded;\n\n    if (status === Status.unloaded) {\n      block.element.dataset.blockStatus = Status.loading;\n\n      try {\n        const { href } = getUrlForEndpoint(`dist/${block.name}/${block.name}.js`);\n        const blockModule = await import(href);\n\n        if (blockModule.default) {\n          await blockModule.default(block.element);\n        }\n\n        block.element.dataset.blockStatus = Status.loaded;\n      } catch (error) {\n        block.element.dataset.blockStatus = Status.error;\n        console.error('An error occurred during module import:', error);\n      }\n    }\n  }\n\n  async loadBlockStyles(block: BlockMapping) {\n    try {\n      await this.loadCSS(`dist/${block.name}/${block.name}.css`);\n    } catch (error) {\n      console.error(`problem with block '${block.name}' loading styles`);\n    }\n  }\n\n  private showSection(section: HTMLElement) {\n    section.style.removeProperty('display');\n  }\n\n  private async loadFonts() {\n    await this.loadCSS('dist/fonts/fonts.css');\n    try {\n      if (!getLocation().hostname.includes('localhost')) sessionStorage.setItem('fonts-loaded', 'true');\n    } catch (e) {\n      console.error('Error setting fonts-loaded in session storage', e);\n      // do nothing\n    }\n  }\n\n  private async loadCSS(endpoint: string) {\n    return new Promise((resolve, reject) => {\n      const { href } = getUrlForEndpoint(endpoint);\n\n      if (!document.querySelector(`head > link[href=\"${href}\"]`)) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = href;\n        link.onload = resolve;\n        link.onerror = reject;\n        document.head.append(link);\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private async waitForLCP() {\n    /* Js Chunks should be loaded\n    Old logic only looks after the first block\n    New logic looks in the first section after lcp candidates, \n    since we show ech section depending on if its blocks and modules are loaded */\n    const firstSection: HTMLElement | null = document.querySelector('.section');\n\n    if (firstSection) {\n      const blocks = this.collectBlocks(firstSection);\n      const blockPromises = blocks.map(async (block) => {\n        const hasLCPBlock = this.lcpBlocks.includes(block.name);\n        if (hasLCPBlock) await Promise.all([this.loadBlockModules(block), this.loadBlockStyles(block)]);\n      });\n\n      await Promise.all(blockPromises);\n      this.showSection(firstSection);\n    }\n\n    // @ts-ignore\n    document.body.style.display = null;\n    const lcpCandidate = document.querySelector<LcpCandidate>('main img');\n\n    await new Promise<void>((resolve) => {\n      if (lcpCandidate && !lcpCandidate.complete) {\n        lcpCandidate.setAttribute('loading', 'eager');\n        lcpCandidate.setAttribute('fetchpriority', 'high');\n        lcpCandidate.addEventListener('load', () => resolve());\n        lcpCandidate.addEventListener('error', () => resolve());\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  private async loadBlock(section: HTMLElement) {\n    const sectionsBlocks: BlockMapping[] = this.collectBlocks(section);\n\n    if (!sectionsBlocks.length) {\n      this.showSection(section);\n      return;\n    }\n\n    for (const block of sectionsBlocks) {\n      Promise.all([this.loadBlockModules(block), this.loadBlockStyles(block)]);\n    }\n\n    this.showSection(section);\n  }\n}\n","export default function setupHlxObj(mainScriptPath: string = 'dist/main/main.js') {\n  window.hlx = window.hlx || {};\n  window.hlx.RUM_MASK_URL = 'full';\n  window.hlx.codeBasePath = '';\n  window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n  const scriptEl = document.querySelector(`script[src$=\"${mainScriptPath}\"]`) as HTMLScriptElement;\n  if (scriptEl) {\n    try {\n      [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split(mainScriptPath);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('setupHlxObj', error);\n    }\n  }\n}\n","import { addClasses } from '../utils/addClasses';\nimport { getMetadata } from '../utils/getMetadata';\n\n/**\n * Decorates the template and theme by adding classes to the body.\n * The classes are defined in the meta tags of the document.\n * Usefull for styling the page based on the template and theme meta tags\n * that can be set in the metadata table in EDS.\n * @example\n * <meta name=\"template\" content=\"template-name\">\n * <meta name=\"theme\" content=\"theme-name\">\n * @example\n * <body class=\"template-name theme-name\">\n */\nexport function decorateBodyTag() {\n  const template = getMetadata('template');\n  if (template) addClasses(document.body, template);\n  const theme = getMetadata('theme');\n  if (theme) addClasses(document.body, theme);\n}\n","/**\n * Returns undefined if the value is an empty string, otherwise returns the value itself.\n *\n * @param {string} value - The value to check.\n * @returns {string | undefined} - If the value is an empty string, returns undefined\n * otherwise, returns the value itself.\n *\n * @example\n * // Example usage:\n * const emptyValue = '';\n * const nonEmptyValue = 'Hello, World!';\n *\n * const result1 = undefinedOnEmpty(emptyValue);\n * console.log(result1); // Output: undefined\n *\n * const result2 = undefinedOnEmpty(nonEmptyValue);\n * console.log(result2); // Output: 'Hello, World!'\n */\nexport function undefinedOnEmpty(value: string): string | undefined {\n  return value.trim() === '' ? undefined : value;\n}\n","import { getMetadata } from '../utils/getMetadata';\nimport { undefinedOnEmpty } from '../utils/undefinedOnEmpty';\n\n/*\n * This function sets the language of the document\n */\nexport function setDocLanguage() {\n  const lang = getMetadata('language');\n  document.documentElement.lang = undefinedOnEmpty(lang) || 'en';\n}\n","import setupHlxObj from './setupHlxObj';\nimport { decorateBodyTag } from './decorateBodyTag';\nimport { setDocLanguage } from './setDocLanguage';\n\n// type LifecycleCallback = () => void | Promise<void>;\n\n// interface LifecycleCallbacks {\n//   beforeInit?: LifecycleCallback;\n//   afterInit?: LifecycleCallback;\n//   beforeLoadEager?: LifecycleCallback;\n//   loadEager?: LifecycleCallback;\n//   afterLoadEager?: LifecycleCallback;\n//   beforeLoadLazy?: LifecycleCallback;\n//   loadLazy?: LifecycleCallback;\n//   afterLoadLazy?: LifecycleCallback;\n//   beforeLoadDelayed?: LifecycleCallback;\n//   loadDelayed?: LifecycleCallback;\n//   afterLoadDelayed?: LifecycleCallback;\n// }\n\n// class HLX {\n//   private beforeInit: LifecycleCallback;\n//   private afterInit: LifecycleCallback;\n//   private beforeLoadEager: LifecycleCallback;\n//   private loadEager: LifecycleCallback;\n//   private afterLoadEager: LifecycleCallback;\n//   private beforeLoadLazy: LifecycleCallback;\n//   private loadLazy: LifecycleCallback;\n//   private afterLoadLazy: LifecycleCallback;\n//   private beforeLoadDelayed: LifecycleCallback;\n//   private loadDelayed: LifecycleCallback;\n//   private afterLoadDelayed: LifecycleCallback;\n//   private initializedPromise: Promise<void>;\n\n//   private loadLazyPromise?: Promise<void>;\n\n//   constructor({\n//     beforeInit = () => {},\n//     afterInit = () => {},\n//     beforeLoadEager = () => {},\n//     loadEager = () => {},\n//     afterLoadEager = () => {},\n//     beforeLoadLazy = () => {},\n//     loadLazy = () => {},\n//     afterLoadLazy = () => {},\n//     beforeLoadDelayed = () => {},\n//     loadDelayed = () => {},\n//     afterLoadDelayed = () => {},\n//   }: LifecycleCallbacks = {}) {\n//     this.beforeInit = beforeInit;\n//     this.afterInit = afterInit;\n//     this.beforeLoadEager = beforeLoadEager;\n//     this.loadEager = loadEager;\n//     this.afterLoadEager = afterLoadEager;\n//     this.beforeLoadLazy = beforeLoadLazy;\n//     this.loadLazy = loadLazy;\n//     this.afterLoadLazy = afterLoadLazy;\n//     this.beforeLoadDelayed = beforeLoadDelayed;\n//     this.loadDelayed = loadDelayed;\n//     this.afterLoadDelayed = afterLoadDelayed;\n//     this.initializedPromise = this.init();\n//   }\n\n//   private async init() {\n//     try {\n//       console.time('init execution time: ');\n//       await this.beforeInit();\n//       await this._loadEager();\n//       await this._loadLazy();\n//       await this._loadDelayed();\n//       await this.afterInit();\n//       console.timeEnd('init execution time: ');\n//     } catch (error) {\n//       console.error('Error initializing HLX:', error);\n//       throw error;\n//     }\n//   }\n\n//   private async _loadEager() {\n//     await this.beforeLoadEager();\n//     console.time('loadEager execution time: ');\n//     setupHlxObj();\n//     decorateBodyTag();\n//     setDocLanguage();\n//     await this.loadEager();\n//     await waitFor(300);\n//     console.timeEnd('loadEager execution time: ');\n//     await this.afterLoadEager();\n//   }\n\n//   private async _loadLazy() {\n//     await this.beforeLoadLazy();\n\n//     console.time('loadLazy execution time: ');\n//     await this.loadLazy();\n//     await waitFor(300);\n\n//     console.timeEnd('loadLazy execution time: ');\n//     await this.afterLoadLazy();\n//   }\n\n//   private async _loadDelayed() {\n//     console.time('loadDelayed execution time: ');\n//     await this.beforeLoadDelayed();\n//     await this.loadDelayed();\n//     await waitFor(300);\n//     await this.afterLoadDelayed();\n//     console.timeEnd('loadDelayed execution time: ');\n//   }\n\n//   public async initialized(): Promise<void> {\n//     return this.initializedPromise;\n//   }\n\n//   public async onLoadLazy(): Promise<void> {\n//     if (!this.loadLazyPromise) {\n//       this.loadLazyPromise = this._loadLazy();\n//     }\n//     return this.loadLazyPromise;\n//   }\n// }\n\n// export default HLX;\n\nclass HLX {\n  private beforeEagerPromise: Promise<void>;\n  private eagerPromise: Promise<void>;\n  private beforeLazyPromise: Promise<void>;\n  private lazyPromise: Promise<void>;\n  private beforeDelayedPromise: Promise<void>;\n  private delayedPromise: Promise<void>;\n  private initializedPromise: Promise<void>;\n\n  constructor() {\n    this.init();\n  }\n\n  private init() {\n    this.beforeLoadEager();\n    this.loadEager();\n    this.beforeLoadLazy();\n    this.loadLazy();\n    this.beforeLoadDelayed();\n    this.loadDelayed();\n    this.initialized();\n  }\n\n  public async beforeLoadEager(): Promise<void> {\n    if (this.beforeEagerPromise) return this.beforeEagerPromise;\n\n    console.log(new Date().getTime(), 'beforeLoadEager');\n\n    this.beforeEagerPromise = new Promise((resolve) => {\n      // Business Logic\n      // Resolve\n      setTimeout(() => {\n        resolve();\n      }, 5000);\n    });\n    return this.beforeEagerPromise;\n  }\n\n  public async loadEager(): Promise<void> {\n    if (this.eagerPromise) return this.eagerPromise;\n\n    console.log(new Date().getTime(), 'loadEager');\n\n    this.eagerPromise = new Promise((resolve) => {\n      setupHlxObj();\n      decorateBodyTag();\n      setDocLanguage();\n      setTimeout(() => {\n        resolve();\n      }, 4500);\n    });\n    return this.eagerPromise;\n  }\n\n  public async beforeLoadLazy(): Promise<void> {\n    if (this.beforeLazyPromise) return this.beforeLazyPromise;\n\n    console.log(new Date().getTime(), 'beforeLoadLazy');\n\n    this.beforeLazyPromise = new Promise((resolve) => {\n      // Business Logic\n      // Resolve\n      setTimeout(() => {\n        resolve();\n      }, 4000);\n    });\n    return this.beforeLazyPromise;\n  }\n\n  public async loadLazy(): Promise<void> {\n    if (this.lazyPromise) return this.lazyPromise;\n\n    console.log(new Date().getTime(), 'loadLazy');\n\n    this.lazyPromise = new Promise((resolve) => {\n      // Business Logic\n      // Resolve\n      setTimeout(() => {\n        resolve();\n      }, 3500);\n    });\n    return this.lazyPromise;\n  }\n\n  public async beforeLoadDelayed(): Promise<void> {\n    if (this.beforeDelayedPromise) return this.beforeDelayedPromise;\n\n    console.log(new Date().getTime(), 'beforeLoadDelayed');\n\n    this.beforeDelayedPromise = new Promise((resolve) => {\n      // Business Logic\n      // Resolve\n      setTimeout(() => {\n        resolve();\n      }, 3000);\n    });\n    return this.beforeDelayedPromise;\n  }\n\n  public async loadDelayed(): Promise<void> {\n    if (this.delayedPromise) return this.delayedPromise;\n\n    console.log(new Date().getTime(), 'loadDelayed');\n\n    this.delayedPromise = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, 2000);\n      // laodDelayed scripts\n      // Resolve\n    });\n    return this.delayedPromise;\n  }\n\n  public async initialized(): Promise<void> {\n    if (this.initializedPromise) return this.initializedPromise;\n\n    console.log(new Date().getTime(), 'initialized');\n\n    this.initializedPromise = new Promise((resolve) => {\n      // Business Logic\n      // Resolve\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    });\n    return this.initializedPromise;\n  }\n}\n\nexport default new HLX();\n","import { BlockService } from './services/block.service.ts';\nimport { SectionService } from './services/section.service.ts';\nimport { MainService } from './services/main.service.ts';\nimport HLX from './app/index.ts';\n\n//console.time('APP execution time: ');\n\n// export const App = new HLX({\n//   beforeInit: () => {\n//     console.log('beforeInit');\n//   },\n//   afterInit: () => {\n//     console.log('afterInit');\n//   },\n//   beforeLoadEager: () => {\n//     console.log('beforeLoadEager');\n//   },\n//   loadEager: () => {\n//     console.log('loadEager');\n//   },\n//   afterLoadEager: () => {\n//     console.log('afterLoadEager');\n//   },\n//   beforeLoadLazy: () => {\n//     console.log('beforeLoadLazy');\n//   },\n//   loadLazy: () => {\n//     console.log('loadLazy');\n//   },\n//   afterLoadLazy: () => {\n//     console.log('afterLoadLazy');\n//   },\n//   beforeLoadDelayed: () => {\n//     console.log('beforeLoadDelayed');\n//   },\n//   loadDelayed: () => {\n//     console.log('loadDelayed');\n//   },\n//   afterLoadDelayed: () => {\n//     console.log('afterLoadDelayed');\n//   },\n// });\n\n// export const App = HLX; // init -> loadEager (3s)\n\nHLX.initialized().then(() => {\n  console.log('INITIALIZED');\n});\n\nHLX.loadDelayed().then(() => {\n  console.log('LOAD DELAYED 2');\n});\n\nHLX.loadDelayed().then(() => {\n  console.log('LOAD DELAYED 3');\n});\n\nHLX.loadDelayed().then(() => {\n  console.log('LOAD DELAYED 1');\n});\n\nHLX.beforeLoadEager().then(() => {\n  console.log('BEFORE LOAD EAGER');\n});\n\nHLX.loadEager().then(() => {\n  console.log('LOAD EAGER');\n});\n\nHLX.loadLazy().then(() => {\n  console.log('LOAD LAZY');\n});\n\nHLX.beforeLoadDelayed().then(() => {\n  console.log('BEFORE LOAD DELAYED');\n});\n\nHLX.beforeLoadLazy().then(() => {\n  console.log('BEFORE LOAD LAZY');\n});\n\n// eager, lazy, delayed\n\n//console.timeEnd('HLX execution time: ');\n(async function () {\n  try {\n    //await App.initialized();\n\n    const blockService = new BlockService();\n    const sectionService = new SectionService(blockService);\n    const main = new MainService(sectionService, blockService);\n    await main.init();\n  } catch (error) {}\n})();\n\ndeclare global {\n  interface Window {\n    hlx: {\n      RUM_MASK_URL: string;\n      codeBasePath: string;\n      lighthouse: boolean;\n    };\n  }\n}\n"],"file":"main/main.js"}