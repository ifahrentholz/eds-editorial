{"version":3,"file":"posts.js","sources":["../../src/blocks/posts/posts.ts"],"sourcesContent":["import { html, render } from 'lit';\nimport { createOptimizedPicture } from '../../utils/createOptimizedPicture';\nimport SitemapService from '../../services/sitemap.service.ts';\nimport { fetchText } from '../../utils/fetchText.ts';\n\ninterface PostArgs {\n  postUrl: string;\n  headline?: string;\n  text?: string;\n  picture: HTMLPictureElement;\n  buttontext?: string;\n}\n\nconst postTemplate = (args: PostArgs) => {\n  const { postUrl, headline, text, picture, buttontext } = args;\n  return html`\n    <article>\n      <a href=\"${postUrl}\" class=\"image\">${picture}</a>\n      <h3>${headline}</h3>\n      <p>${text?.slice(0, 200)}</p>\n      <ul class=\"actions\">\n        <li><a href=\"${postUrl}\" class=\"button\">${buttontext ? buttontext : 'More'}</a></li>\n      </ul>\n    </article>\n  `;\n};\n\nconst template = (posts: PostArgs[]) => {\n  return posts.map((post) => postTemplate(post));\n};\n\nexport default async function (block: HTMLElement) {\n  block.innerHTML = '';\n\n  const parser = new DOMParser();\n  const siteMap = await SitemapService.getSiteMap();\n  const siteMapPostEntries = siteMap.filter((item) => item.path.includes('/posts'));\n\n  const postsPreview = await Promise.all(\n    siteMapPostEntries.map(async (post) => await fetchText(`${post.path}.plain.html`))\n  );\n\n  const postsPreviewHtml = postsPreview.map((res) => parser.parseFromString(res, 'text/html'));\n  const posts = postsPreviewHtml.map((doc, index) => {\n    return {\n      postUrl: `${window.hlx.codeBasePath}${siteMapPostEntries[index].path}`,\n      headline: doc.querySelector('h1')?.innerText || doc.querySelector('h2')?.innerText,\n      text: doc.querySelector('p')?.innerText?.trim(),\n      buttontext: siteMapPostEntries[index].buttontext,\n      picture: createOptimizedPicture({\n        src: siteMapPostEntries[index].image,\n        alt: siteMapPostEntries[index].imagealt,\n      }),\n    };\n  });\n\n  block.style.removeProperty('display');\n  render(template(posts), block);\n}\n"],"names":["postTemplate","args","postUrl","headline","text","picture","buttontext","html","template","posts","post","block","parser","siteMapPostEntries","SitemapService","item","fetchText","res","doc","index","_a","_b","_d","_c","createOptimizedPicture","render"],"mappings":"+IAaA,MAAMA,EAAgBC,GAAmB,CACvC,KAAM,CAAE,QAAAC,EAAS,SAAAC,EAAU,KAAAC,EAAM,QAAAC,EAAS,WAAAC,CAAe,EAAAL,EAClD,OAAAM,sBAEQL,CAAO,mBAAmBG,CAAO,WACtCF,CAAQ,WACTC,GAAA,YAAAA,EAAM,MAAM,EAAG,IAAI,wCAEPF,CAAO,oBAAoBI,GAA0B,MAAM,0BAIlF,EAEME,EAAYC,GACTA,EAAM,IAAKC,GAASV,EAAaU,CAAI,CAAC,EAG/C,eAAAD,EAA+BE,EAAoB,CACjDA,EAAM,UAAY,GAEZ,MAAAC,EAAS,IAAI,UAEbC,GADU,MAAMC,EAAe,cACF,OAAQC,GAASA,EAAK,KAAK,SAAS,QAAQ,CAAC,EAO1EN,GALe,MAAM,QAAQ,IACjCI,EAAmB,IAAI,MAAOH,GAAS,MAAMM,EAAU,GAAGN,EAAK,IAAI,aAAa,CAAC,CAAA,GAG7C,IAAKO,GAAQL,EAAO,gBAAgBK,EAAK,WAAW,CAAC,EAC5D,IAAI,CAACC,EAAKC,IAAU,aAC1C,MAAA,CACL,QAAS,GAAG,OAAO,IAAI,YAAY,GAAGN,EAAmBM,CAAK,EAAE,IAAI,GACpE,WAAUC,EAAAF,EAAI,cAAc,IAAI,IAAtB,YAAAE,EAAyB,cAAaC,EAAAH,EAAI,cAAc,IAAI,IAAtB,YAAAG,EAAyB,WACzE,MAAMC,GAAAC,EAAAL,EAAI,cAAc,GAAG,IAArB,YAAAK,EAAwB,YAAxB,YAAAD,EAAmC,OACzC,WAAYT,EAAmBM,CAAK,EAAE,WACtC,QAASK,EAAuB,CAC9B,IAAKX,EAAmBM,CAAK,EAAE,MAC/B,IAAKN,EAAmBM,CAAK,EAAE,QAAA,CAChC,CAAA,CACH,CACD,EAEKR,EAAA,MAAM,eAAe,SAAS,EAC7Bc,EAAAjB,EAASC,CAAK,EAAGE,CAAK,CAC/B"}