{"version":3,"mappings":"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","names":["BlockService","block","config","row","cols","col","name","toClassName","value","as","a","imgs","img","ps","p","main","shortBlockName","blockWrapper","section","addClasses","element","classes","cssClass","getMetadata","doc","attr","meta","metaElement","getLocation","isSidekickLibraryActive","_Status","Status","MainService","sectionService","blockService","lazyStylesScssPath","sidekickLibraryStylesScssPath","fontsScssPath","error","SectionsPromises","scriptEl","sidebarContainer","children","template","theme","blockMap","blockModule","__vitePreload","href","resolve","reject","link","firstSection","blockPromises","lcpCandidate","sectionsBlocks"],"sources":["../../src/services/block.service.ts","../../src/utils/addClasses.ts","../../src/utils/getMetadata.ts","../../config.ts","../../src/sidekickHelpers/getLocation.ts","../../src/services/main.service.ts"],"sourcesContent":["import { toClassName } from '../utils/toClassName';\n\nexport class BlockService {\n  //TODO: Provider for fetch data\n\n  /**\n   * Extracts the config from a block.\n   * @param {Element} block The block element\n   * @returns {object} The block config\n   */\n  readBlockConfig(block: Element): Record<string, any> {\n    const config: Record<any, any> = {};\n    block.querySelectorAll(':scope > div').forEach((row) => {\n      if (row.children) {\n        const cols = [...row.children];\n        if (cols[1]) {\n          const col = cols[1];\n          const name = toClassName(cols[0].textContent ?? '');\n          let value: any = '';\n          if (col.querySelector('a')) {\n            const as = [...col.querySelectorAll('a')];\n            if (as.length === 1) {\n              value = as[0].href;\n            } else {\n              value = as.map((a) => a.href);\n            }\n          } else if (col.querySelector('img')) {\n            const imgs = [...col.querySelectorAll('img')];\n            if (imgs.length === 1) {\n              value = imgs[0].src;\n            } else {\n              value = imgs.map((img) => img.src);\n            }\n          } else if (col.querySelector('p')) {\n            const ps = [...col.querySelectorAll('p')];\n            if (ps.length === 1) {\n              value = ps[0].textContent;\n            } else {\n              value = ps.map((p) => p.textContent);\n            }\n          } else value = row.children[1].textContent;\n          config[name] = value;\n        }\n      }\n    });\n    return config;\n  }\n\n  /**\n   * Decorates all blocks in a container element.\n   * @param {Element} main The container element\n   */\n  decorateBlocks(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach(this.decorateBlock);\n  }\n\n  /**\n   * Decorates a block.\n   * @param {Element} block The block element\n   */\n  private decorateBlock(block: HTMLElement) {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  }\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Adds CSS classes to an HTML element.\n *\n * @param {HTMLElement} element - The HTML element to which classes will be added.\n * @param {string} classes - A string containing CSS classes separated by commas.\n *\n * @example\n * const element = document.getElementById('myElement');\n * const classesToAdd = 'class1, class2, class3';\n * addClasses(element, classesToAdd);\n */\nexport const addClasses = (element: HTMLElement, classes: string): void => {\n  classes.split(',').forEach((cssClass: string): void => {\n    element.classList.add(toClassName(cssClass.trim()));\n  });\n};\n","/**\n * Retrieves the content of a specified metadata tag from the document head.\n *\n * @param {string} value - The name or property attribute value of the metadata tag.\n * @param {Document} [doc=document] - The document to search for the metadata tag (default is the current document).\n * @returns {string} - The content of the metadata tag, if found; otherwise, an empty string.\n *\n * @example\n * // Example 1:\n * // Assuming <meta name=\"description\" content=\"This is a sample description.\"> exists in the document head.\n * const metaContent = getMetadata('description');\n * console.log(metaContent);\n * // Output: 'This is a sample description.'\n *\n * @example\n * // Example 2:\n * // Assuming <meta property=\"og:title\" content=\"Open Graph Title\"> exists in the document head.\n * const metaContent = getMetadata('og:title', document);\n * console.log(metaContent);\n * // Output: 'Open Graph Title'\n */\nexport function getMetadata(value: string, doc: Document = document): string {\n  const attr: 'property' | 'name' = value && value.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${value}\"]`)] as HTMLMetaElement[]) || [];\n  const meta: string = metaTags.map((metaElement: HTMLMetaElement) => metaElement.content).join(', ');\n  return meta.length ? meta : '';\n}\n","export interface Config {\n  mainTsPath: string;\n  mainScssPath: string;\n  iconsDirPath: string;\n  iconsTypesPath: string;\n  fontsScssPath?: string;\n  lazyStylesScssPath?: string;\n  sidekickLibraryStylesScssPath?: string;\n}\n\nexport const config: Config = {\n  mainTsPath: 'src/main.ts',\n  mainScssPath: 'src/styles/sass/main.scss',\n  iconsDirPath: './public/icons',\n  iconsTypesPath: './src/icons.types.ts',\n  fontsScssPath: 'src/styles/sass/fonts.scss',\n  lazyStylesScssPath: 'src/styles/sass/lazy-styles.scss',\n  sidekickLibraryStylesScssPath: 'src/styles/sass/sidekick-library-styles.scss',\n};\n","import { isSidekickLibraryActive } from './isSidekickLibraryActive';\n\n/**\n * Returns the true origin of the current page in the browser.\n * If the page is running in an iframe with srcdoc, the query param is returned.\n * @returns {String} The query param of the current page or the query param of the block running in the library\n *\n * @example\n * const searchParams = new URLSearchParams(getLocation().search);\n *\n * @remarks\n * Needs to be used when the Sidekick Library Plugin is in use.\n */\nexport function getLocation(): Location {\n  return isSidekickLibraryActive() ? window.parent.location : window.location;\n}\n","import { isSidekickLibraryActive } from '../sidekickHelpers/isSidekickLibraryActive';\nimport { addClasses } from '../utils/addClasses';\nimport { getMetadata } from '../utils/getMetadata';\nimport { BlockService } from './block.service';\nimport { SectionService } from './section.service';\nimport { config } from '../../config.ts';\nimport { getLocation } from '../sidekickHelpers/getLocation.ts';\n\ntype BlockMapping = {\n  name: string;\n  element: HTMLDivElement;\n};\n\ninterface LcpCandidate extends HTMLElement {\n  complete: boolean;\n}\n\nclass Status {\n  static unloaded = 'unloaded';\n  static loading = 'loading';\n  static loaded = 'loaded';\n  static error = 'error';\n}\n\nexport class MainService {\n  private lcpBlocks = ['banner'];\n\n  constructor(\n    private sectionService: SectionService,\n    private blockService: BlockService\n  ) {}\n\n  init = async () => {\n    this.setup();\n    await this.loadEager();\n    await this.loadLazy();\n  };\n\n  /**\n   * Setup block utils.\n   */\n  private setup() {\n    window.hlx = window.hlx || {};\n    window.hlx.RUM_MASK_URL = 'full';\n    window.hlx.codeBasePath = '';\n    window.hlx.lighthouse = new URLSearchParams(getLocation().search).get('lighthouse') === 'on';\n\n    const scriptEl = document.querySelector('script[src$=\"/scripts/scripts.js\"]') as HTMLScriptElement;\n    if (scriptEl) {\n      try {\n        [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split('/scripts/scripts.js');\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    }\n  }\n\n  private loadEager = async () => {\n    // TODO: how to support different languages here\n    document.documentElement.lang = 'en';\n    this.decorateTemplateAndTheme();\n    const main = document.querySelector('main');\n    if (main) {\n      main.setAttribute('id', 'main');\n      this.addSidebarContainer(main);\n      this.sectionService.init(main);\n      this.addInnerContainer(main); // TODO refactor initializing\n      this.blockService.decorateBlocks(main);\n\n      // TODO: Performance adjustment\n      setTimeout(() => {\n        document.body.classList.add('show');\n      }, 100);\n\n      await this.waitForLCP();\n\n      try {\n        /* if desktop (proxy for fast connection) or fonts already loaded, load fonts.css */\n        if (window.innerWidth >= 900 || sessionStorage.getItem('fonts-loaded')) {\n          await this.loadFonts();\n        }\n      } catch (e) {\n        // do nothing\n      }\n    }\n  };\n\n  private addSidebarContainer(main: HTMLElement) {\n    if (isSidekickLibraryActive()) return;\n\n    const sidebarContainer = document.createElement('sidebar-component');\n    sidebarContainer.setAttribute('id', 'sidebar');\n    window.innerWidth <= 1280 ? sidebarContainer.classList.remove('active') : sidebarContainer.classList.add('active');\n    window.innerWidth <= 1280 ? sidebarContainer.classList.remove('active') : sidebarContainer.classList.add('active');\n    main.after(sidebarContainer);\n  }\n\n  private addInnerContainer(main: HTMLElement) {\n    const children = main.innerHTML;\n    main.innerHTML = `<div class=\"inner\">${isSidekickLibraryActive() ? `` : `<header-component id=\"header\"></header-component>`}${children}</div>`;\n  }\n\n  private loadLazy = async () => {\n    const { lazyStylesScssPath, sidekickLibraryStylesScssPath, fontsScssPath } = config;\n    try {\n      if (lazyStylesScssPath) await this.loadCSS(`${window.hlx.codeBasePath}/dist/lazyStyles/lazyStyles.css`);\n      if (sidekickLibraryStylesScssPath && isSidekickLibraryActive()) {\n        await this.loadCSS(`${window.hlx.codeBasePath}/dist/sidekickLibraryStyles/sidekickLibraryStyles.css`);\n      }\n      if (fontsScssPath) await this.loadFonts();\n      await this.loadBlocks();\n    } catch (error) {\n      console.error('Load lazy error: ', error);\n    }\n  };\n\n  private decorateTemplateAndTheme() {\n    const template = getMetadata('template');\n    if (template) addClasses(document.body, template);\n    const theme = getMetadata('theme');\n    if (theme) addClasses(document.body, theme);\n  }\n\n  /**\n   * Loads Blocks\n   * by getting all sections and load every block in every section\n   * and shows every section that is finished loading.\n   */\n  private loadBlocks = async () => {\n    const sections = [...document.querySelectorAll<HTMLElement>('.section')];\n    const SectionsPromises = sections.map((section) => this.loadBlock(section));\n\n    await Promise.all(SectionsPromises);\n  };\n\n  private collectBlocks(section: HTMLElement): BlockMapping[] {\n    const blockMap: BlockMapping[] = [];\n    const blocksElements = section.querySelectorAll<HTMLDivElement>('[data-block-name]');\n\n    blocksElements.forEach((block: HTMLDivElement) => {\n      blockMap.push({\n        name: block.dataset['blockName'] as string,\n        element: block,\n      });\n    });\n\n    return blockMap;\n  }\n\n  private async loadBlockModules(block: BlockMapping) {\n    const status = block.element.dataset.blockStatus ?? Status.unloaded;\n\n    if (status === Status.unloaded) {\n      block.element.dataset.blockStatus = Status.loading;\n\n      try {\n        const blockModule = await import(`${window.hlx.codeBasePath}/dist/${block.name}/${block.name}.js`);\n\n        if (blockModule.default) {\n          await blockModule.default(block.element);\n        }\n\n        block.element.dataset.blockStatus = Status.loaded;\n      } catch (error) {\n        block.element.dataset.blockStatus = Status.error;\n        console.error('An error occurred during module import:', error);\n      }\n    }\n  }\n\n  async loadBlockStyles(block: BlockMapping) {\n    try {\n      await this.loadCSS(`${window.hlx.codeBasePath}/dist/${block.name}/${block.name}.css`);\n    } catch (error) {\n      console.error(`problem with block '${block.name}' loading styles`);\n    }\n  }\n\n  private showSection(section: HTMLElement) {\n    section.style.removeProperty('display');\n  }\n\n  private async loadFonts() {\n    await this.loadCSS(`${window.hlx.codeBasePath}/dist/fonts/fonts.css`);\n    try {\n      if (!getLocation().hostname.includes('localhost')) sessionStorage.setItem('fonts-loaded', 'true');\n    } catch (e) {\n      // do nothing\n    }\n  }\n\n  private async loadCSS(href: string) {\n    return new Promise((resolve, reject) => {\n      if (!document.querySelector(`head > link[href=\"${href}\"]`)) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = href;\n        link.onload = resolve;\n        link.onerror = reject;\n        document.head.append(link);\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private async waitForLCP() {\n    /* Js Chunks should be loaded\n    Old logic only looks after the first block\n    New logic looks in the first section after lcp candidates, \n    since we show ech section depending on if its blocks and modules are loaded */\n    const firstSection: HTMLElement | null = document.querySelector('.section');\n\n    if (firstSection) {\n      const blocks = this.collectBlocks(firstSection);\n      const blockPromises = blocks.map(async (block) => {\n        const hasLCPBlock = this.lcpBlocks.includes(block.name);\n        if (hasLCPBlock) await Promise.all([this.loadBlockModules(block), this.loadBlockStyles(block)]);\n      });\n\n      await Promise.all(blockPromises);\n      this.showSection(firstSection);\n    }\n\n    // @ts-ignore\n    document.body.style.display = null;\n    const lcpCandidate = document.querySelector<LcpCandidate>('main img');\n\n    await new Promise<void>((resolve) => {\n      if (lcpCandidate && !lcpCandidate.complete) {\n        lcpCandidate.setAttribute('loading', 'eager');\n        lcpCandidate.setAttribute('fetchpriority', 'high');\n        lcpCandidate.addEventListener('load', () => resolve());\n        lcpCandidate.addEventListener('error', () => resolve());\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  private async loadBlock(section: HTMLElement) {\n    const sectionsBlocks: BlockMapping[] = this.collectBlocks(section);\n\n    if (!sectionsBlocks.length) {\n      this.showSection(section);\n      return;\n    }\n\n    for (const block of sectionsBlocks) {\n      Promise.all([this.loadBlockModules(block), this.loadBlockStyles(block)]);\n    }\n\n    this.showSection(section);\n  }\n}\n"],"file":"__chunks__/main.service.MfLPVHlZ.js"}