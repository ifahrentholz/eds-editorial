const h=n=>{const e=new URL(window.hlx.codeBasePath,window.location.origin);return new URL(n,e)};class l{constructor(){this.runtimeCache=new Map}get(e){return this.runtimeCache.get(e)}set(e,t){this.runtimeCache.set(e,t)}has(e){return this.runtimeCache.has(e)}delete(e){this.runtimeCache.delete(e)}}class p{constructor(){this.requestPipeline=new Map,this.runtimeCache=new l}fetchJson(e,t={}){return this.fetchData(h(e).href,t,this.getResponseJSON)}fetchText(e,t={}){return this.fetchData(h(e).href,t,this.getResponseText)}async fetchData(e,t,s){const{cacheOptions:r}=t,i=this.getCachedData(e,r);if(i!==null)return i;const a=this.requestPipeline.get(e);if(a!==void 0)return s(await a);const o=fetch(e,t.fetchOptions);this.requestPipeline.set(e,o);const u=await o;this.requestPipeline.delete(e);const c=await s(u);return this.setCachedData(e,c,r),c}async getResponseJSON(e){return await e.clone().json()}async getResponseText(e){return await e.clone().text()}getCachedData(e,t){return(t==null?void 0:t.cacheType)==="runtime"?this.runtimeCache.get(e)??null:null}setCachedData(e,t,s){(s==null?void 0:s.cacheType)==="runtime"&&this.runtimeCache.set(e,t)}}const C=new p;export{C as F,h as g};
//# sourceMappingURL=fetch.service.7cfQZ1Bx.js.map
