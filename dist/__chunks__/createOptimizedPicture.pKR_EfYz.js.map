{"version":3,"file":"createOptimizedPicture.pKR_EfYz.js","sources":["../../src/utils/FetchCache.ts","../../src/utils/fetch.ts","../../src/services/sitemap.service.ts","../../src/utils/createOptimizedPicture.ts"],"sourcesContent":["export class FetchCache {\n  private cache = new Map();\n\n  public set = (url: string, result: any): void => {\n    if (!this.recordExists(url)) {\n      this.cache.set(\n        url,\n        result,\n      );\n    }\n  };\n\n  public get = (url: string): Response | null  => {\n    if (this.recordExists(url)) {\n      return this.cache.get(url);\n    }\n\n    return null;\n  };\n\n  public recordExists = (url: string): boolean => {\n    return this.cache.has(url);\n  };\n}\n\nexport default new FetchCache();\n","import  fetchCache  from './FetchCache.ts';\n\nconst fetchData = async (endpoint: string, init?: RequestInit): Promise<Response> => {\n  const decoratedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  const url = `${window.hlx.codeBasePath}${decoratedEndpoint}`;\n  const cache = fetchCache.get(url);\n\n  if (cache !== null) {\n    return  cache;\n  }\n\n  const response = await fetch(url, init);\n  fetchCache.set(url, response.clone());\n\n  return response;\n};\n\nexport const fetchText = async (endpoint: string, init?: RequestInit): Promise<string> => {\n  return await (await fetchData(endpoint, init)).text();\n};\n\nexport const fetchJson = async <T>(endpoint: string, init?: RequestInit): Promise<T> => {\n  return await (await fetchData(endpoint, init)).json();\n};\n","import { fetchJson } from '../utils/fetch.ts';\nimport { SheetsResponse, Sitemap } from '../shared.types.ts';\n\nexport class SitemapService {\n  async getSiteMap(): Promise<Sitemap> {\n    return <Sitemap>(await this.getQueryIndex()).data;\n  }\n\n  async getQueryIndex(): Promise<SheetsResponse> {\n    return await fetchJson('/query-index.json');\n  }\n}\n\nexport default new SitemapService();","/**\n * Returns a picture element with webp and fallbacks\n * @param {string} src The image URL\n * @param {string} [alt] The image alternative text\n * @param {boolean} [eager] Set loading attribute to eager\n * @param {Array} [breakpoints] Breakpoints and corresponding params (eg. width)\n * @returns {Element} The picture element\n */\n\ninterface CreateOptimizedPictureArgs {\n  src: string;\n  alt: string;\n  width: string;\n  height: string;\n  eager?: boolean;\n  breakpoints?: Array<Record<string, string>>;\n}\n\nexport function createOptimizedPicture(args: CreateOptimizedPictureArgs): HTMLPictureElement {\n  const {\n    src,\n    alt,\n    eager = false,\n    width,\n    height,\n    breakpoints = [{ media: '(min-width: 600px)', width: '2000' }, { width: '750' }],\n  } = args;\n  const url = new URL(src, window.location.href);\n  const picture = document.createElement('picture');\n  const { pathname } = url;\n  const ext = pathname.substring(pathname.lastIndexOf('.') + 1);\n\n  // webp\n  breakpoints.forEach((br) => {\n    const source = document.createElement('source');\n    if (br.media) source.setAttribute('media', br.media);\n    source.setAttribute('type', 'image/webp');\n    source.setAttribute('srcset', `${pathname}?width=${br.width}&format=webply&optimize=medium`);\n    picture.appendChild(source);\n  });\n\n  // fallback\n  breakpoints.forEach((br, i) => {\n    if (i < breakpoints.length - 1) {\n      const source = document.createElement('source');\n      if (br.media) source.setAttribute('media', br.media);\n      source.setAttribute('srcset', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n      picture.appendChild(source);\n    } else {\n      const img = document.createElement('img');\n      img.setAttribute('loading', eager ? 'eager' : 'lazy');\n      img.setAttribute('alt', alt);\n      img.setAttribute('width', width);\n      img.setAttribute('height', height);\n      picture.appendChild(img);\n      img.setAttribute('src', `${pathname}?width=${br.width}&format=${ext}&optimize=medium`);\n    }\n  });\n\n  return picture;\n}\n"],"names":["FetchCache","url","result","fetchCache","fetchData","endpoint","init","decoratedEndpoint","cache","response","fetchText","fetchJson","SitemapService","SitemapService$1","createOptimizedPicture","args","src","alt","eager","width","height","breakpoints","picture","pathname","ext","br","source","i","img"],"mappings":"AAAO,MAAMA,CAAW,CAAjB,aAAA,CACG,KAAA,UAAY,IAEb,KAAA,IAAM,CAACC,EAAaC,IAAsB,CAC1C,KAAK,aAAaD,CAAG,GACxB,KAAK,MAAM,IACTA,EACAC,CAAA,CAEJ,EAGK,KAAA,IAAOD,GACR,KAAK,aAAaA,CAAG,EAChB,KAAK,MAAM,IAAIA,CAAG,EAGpB,KAGF,KAAA,aAAgBA,GACd,KAAK,MAAM,IAAIA,CAAG,CAC3B,CACF,CAEA,MAAeE,EAAA,IAAIH,ECvBbI,EAAY,MAAOC,EAAkBC,IAA0C,CACnF,MAAMC,EAAoBF,EAAS,WAAW,GAAG,EAAIA,EAAW,IAAIA,CAAQ,GACtEJ,EAAM,GAAG,OAAO,IAAI,YAAY,GAAGM,CAAiB,GACpDC,EAAQL,EAAW,IAAIF,CAAG,EAEhC,GAAIO,IAAU,KACJ,OAAAA,EAGV,MAAMC,EAAW,MAAM,MAAMR,EAAKK,CAAI,EACtC,OAAAH,EAAW,IAAIF,EAAKQ,EAAS,MAAO,CAAA,EAE7BA,CACT,EAEaC,EAAY,MAAOL,EAAkBC,IACzC,MAAO,MAAMF,EAAUC,EAAUC,CAAI,GAAG,OAGpCK,EAAY,MAAUN,EAAkBC,IAC5C,MAAO,MAAMF,EAAUC,EAAUC,CAAI,GAAG,OCnB1C,MAAMM,CAAe,CAC1B,MAAM,YAA+B,CAClB,OAAA,MAAM,KAAK,cAAA,GAAiB,IAC/C,CAEA,MAAM,eAAyC,CACtC,OAAA,MAAMD,EAAU,mBAAmB,CAC5C,CACF,CAEA,MAAeE,EAAA,IAAID,ECKZ,SAASE,EAAuBC,EAAsD,CACrF,KAAA,CACJ,IAAAC,EACA,IAAAC,EACA,MAAAC,EAAQ,GACR,MAAAC,EACA,OAAAC,EACA,YAAAC,EAAc,CAAC,CAAE,MAAO,qBAAsB,MAAO,QAAU,CAAE,MAAO,MAAO,CAC7E,EAAAN,EACEd,EAAM,IAAI,IAAIe,EAAK,OAAO,SAAS,IAAI,EACvCM,EAAU,SAAS,cAAc,SAAS,EAC1C,CAAE,SAAAC,CAAa,EAAAtB,EACfuB,EAAMD,EAAS,UAAUA,EAAS,YAAY,GAAG,EAAI,CAAC,EAGhD,OAAAF,EAAA,QAASI,GAAO,CACpB,MAAAC,EAAS,SAAS,cAAc,QAAQ,EAC1CD,EAAG,OAAcC,EAAA,aAAa,QAASD,EAAG,KAAK,EAC5CC,EAAA,aAAa,OAAQ,YAAY,EACxCA,EAAO,aAAa,SAAU,GAAGH,CAAQ,UAAUE,EAAG,KAAK,gCAAgC,EAC3FH,EAAQ,YAAYI,CAAM,CAAA,CAC3B,EAGWL,EAAA,QAAQ,CAACI,EAAIE,IAAM,CACzB,GAAAA,EAAIN,EAAY,OAAS,EAAG,CACxB,MAAAK,EAAS,SAAS,cAAc,QAAQ,EAC1CD,EAAG,OAAcC,EAAA,aAAa,QAASD,EAAG,KAAK,EAC5CC,EAAA,aAAa,SAAU,GAAGH,CAAQ,UAAUE,EAAG,KAAK,WAAWD,CAAG,kBAAkB,EAC3FF,EAAQ,YAAYI,CAAM,CAAA,KACrB,CACC,MAAAE,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,aAAa,UAAWV,EAAQ,QAAU,MAAM,EAChDU,EAAA,aAAa,MAAOX,CAAG,EACvBW,EAAA,aAAa,QAAST,CAAK,EAC3BS,EAAA,aAAa,SAAUR,CAAM,EACjCE,EAAQ,YAAYM,CAAG,EACnBA,EAAA,aAAa,MAAO,GAAGL,CAAQ,UAAUE,EAAG,KAAK,WAAWD,CAAG,kBAAkB,CACvF,CAAA,CACD,EAEMF,CACT"}