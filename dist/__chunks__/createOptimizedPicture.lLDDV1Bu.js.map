{"version":3,"file":"createOptimizedPicture.lLDDV1Bu.js","sources":["../../src/utils/RuntimeCache.ts","../../src/services/fetch.service.ts","../../src/utils/createOptimizedPicture.ts"],"sourcesContent":["export class RuntimeCache {\n  private runtimeCache: Map<string, any> = new Map();\n\n  public get<T>(key: string): T | undefined {\n    return this.runtimeCache.get(key);\n  }\n\n  public set<T>(key: string, value: T): void {\n    this.runtimeCache.set(key, value);\n  }\n\n  public has(key: string): boolean {\n    return this.runtimeCache.has(key);\n  }\n\n  public delete(key: string): void {\n    this.runtimeCache.delete(key);\n  }\n}\n","import { RuntimeCache } from '../utils/RuntimeCache';\n\nexport interface FetchServiceCacheOptions {\n  cacheType?: 'runtime'; // 'local' | 'session' | \"request\" can be added later\n}\n\nexport interface FetchServiceOptions {\n  fetchOptions?: RequestInit;\n  cacheOptions?: FetchServiceCacheOptions;\n}\n\nclass FetchService {\n  private requestPipeline: Map<string, Promise<Response>> = new Map();\n\n  private runtimeCache = new RuntimeCache();\n\n  public fetchJson<T>(url: string, options: FetchServiceOptions = {}): Promise<T> {\n    return this.fetchData(url, options, this.getResponseJSON<T>);\n  }\n\n  public fetchText(url: string, options: FetchServiceOptions = {}): Promise<string> {\n    return this.fetchData(url, options, this.getResponseText);\n  }\n\n  private async fetchData<T>(\n    url: string,\n    options: FetchServiceOptions,\n    dataMapper: (Response) => Promise<T>\n  ): Promise<T> {\n    const { cacheOptions } = options;\n    const cachedData = this.getCachedData<T>(url, cacheOptions);\n    if (cachedData !== null) return cachedData;\n\n    const pipelinedRequest = this.requestPipeline.get(url);\n    if (pipelinedRequest !== undefined) return dataMapper(await pipelinedRequest);\n\n    const request = fetch(url, options.fetchOptions);\n    this.requestPipeline.set(url, request);\n\n    const response = await request;\n    this.requestPipeline.delete(url);\n    const responseData = await dataMapper(response);\n\n    this.setCachedData(url, responseData, cacheOptions);\n    return responseData;\n  }\n\n  private async getResponseJSON<T>(response: Response): Promise<T> {\n    const responseClone = response.clone();\n    const responseJson = await responseClone.json();\n    return responseJson;\n  }\n\n  private async getResponseText(response: Response): Promise<string> {\n    const responseClone = response.clone();\n    const responseText = await responseClone.text();\n    return responseText;\n  }\n\n  private getCachedData<T>(url: string, cacheOptions?: FetchServiceCacheOptions): T | null {\n    if (cacheOptions?.cacheType === 'runtime') {\n      return this.runtimeCache.get(url) ?? null;\n    }\n    return null;\n  }\n\n  private setCachedData<T>(url: string, data: T, cacheOptions?: FetchServiceCacheOptions): void {\n    if (cacheOptions?.cacheType === 'runtime') {\n      this.runtimeCache.set(url, data);\n    }\n  }\n}\n\nexport default new FetchService();\n","/**\n * Represents a breakpoint configuration used in responsive web design.\n *\n * @interface BreakPoint\n * @property {number} [media] - The media query string defining the condition for this breakpoint.\n * @property {number} [width] - The width associated with this breakpoint.\n *\n * @example\n * // Example usage:\n * const exampleBreakPoint: BreakPoint = {\n *   media: \"(min-width: 600px)\",\n *   width: \"100\"\n * };\n */\ninterface BreakPoint {\n  media?: string;\n  width?: number;\n}\n\n/**\n * Represents the arguments for creating an optimized picture element.\n *\n * @interface CreateOptimizedPictureArgs\n * @property {string} src - The URL of the image.\n * @property {string} alt - The alternative text for the image.\n * @property {number} width - The width of the image in CSS pixels.\n * @property {number} height - The height of the image in CSS pixels.\n * @property {boolean} [eager] - Whether to load the image immediately.\n * @property {BreakPoint[]} [breakpoints] - The breakpoints for responsive images.\n */\ninterface CreateOptimizedPictureArgs {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  eager?: boolean;\n  breakpoints?: BreakPoint[];\n}\n\n/**\n * Creates an optimized HTML picture element with responsive image sources and a fallback image.\n *\n * @param {CreateOptimizedPictureArgs} createOptimizedPictureArgs - The arguments for creating the picture element.\n * @returns {HTMLPictureElement} - The created HTML picture element.\n *\n * @example\n * const args = {\n *   src: 'image.jpg',\n *   alt: 'Example Image',\n *   width: '200',\n *   height: '150',\n *   eager: true,\n *   breakpoints: [\n *     { media: '(min-width: 600px)', width: '800' },\n *     { media: '(min-width: 1200px)', width: '1600' }\n *   ]\n * };\n * const pictureElement = createOptimizedPicture(args);\n * document.body.appendChild(pictureElement);\n *\n * @remarks\n * The last breakpoint provided in the `breakpoints` array is used as the source for the fallback image.\n */\nexport function createOptimizedPicture(createOptimizedPictureArgs: CreateOptimizedPictureArgs): HTMLPictureElement {\n  const {\n    src,\n    alt,\n    eager = false,\n    width,\n    height,\n    breakpoints = [{ media: '(min-width: 600px)', width: 200 }, { width: 750 }],\n  } = createOptimizedPictureArgs;\n  const url = new URL(src, window.location.href);\n  const picture = document.createElement('picture');\n  const { pathname } = url;\n  const ext = pathname.substring(pathname.lastIndexOf('.') + 1);\n\n  // webp\n  breakpoints.forEach((breakpoint: BreakPoint): void => {\n    const source = document.createElement('source');\n    if (breakpoint.media) source.setAttribute('media', breakpoint.media);\n    source.setAttribute('type', 'image/webp');\n    source.setAttribute('srcset', `${pathname}?width=${breakpoint.width}&format=webply&optimize=medium`);\n    picture.appendChild(source);\n  });\n\n  // fallback\n  breakpoints.forEach((breakpoint: Record<string, string>, index: number): void => {\n    if (index < breakpoints.length - 1) {\n      const source = document.createElement('source');\n      if (breakpoint.media) source.setAttribute('media', breakpoint.media);\n      source.setAttribute('srcset', `${pathname}?width=${breakpoint.width}&format=${ext}&optimize=medium`);\n      picture.appendChild(source);\n    } else {\n      const img = document.createElement('img');\n      img.setAttribute('loading', eager ? 'eager' : 'lazy');\n      img.setAttribute('alt', alt);\n      img.setAttribute('width', width.toString());\n      img.setAttribute('height', height.toString());\n      picture.appendChild(img);\n      img.setAttribute('src', `${pathname}?width=${breakpoint.width}&format=${ext}&optimize=medium`);\n    }\n  });\n\n  return picture;\n}\n"],"names":["RuntimeCache","key","value","FetchService","url","options","dataMapper","cacheOptions","cachedData","pipelinedRequest","request","response","responseData","data","FetchService$1","createOptimizedPicture","createOptimizedPictureArgs","src","alt","eager","width","height","breakpoints","picture","pathname","ext","breakpoint","source","index","img"],"mappings":"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"}